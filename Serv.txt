dsquery * -filter "(&(&(objectCategory=computer)))" -limit 5000 -attr name pwdLastSet lastLogonTimestamp operatingSystem
https://social.technet.microsoft.com/wiki/contents/articles/2195.active-directory-dsquery-commands.aspx

 Schema Version ": Get-ADObject (get-adrootdse).schemaNamingContext -Property objectVersion

https://blogs.technet.microsoft.com/askcore/2016/10/19/windows-server-2016-volume-activation-tips/


Reboot : Get-EventLog -ComputerName  -LogName System | Where-Object {eveventID -eq 1074} |Select-Object MachineName,TimeGenerated,Source
Get-EventLog -ComputerName System | Where-Object { $_.Source -eq 'user32' } | ConvertTo-HTML | Out-File C:\Reboot.htm

auditpol /get /category:*

psexec <Serveranme> cmd /c del /s c:\sccmclient 

Get-DnsServerDsSetting -ComputerName (Get-ADDomainController | % {$_.Name})|Set-DnsServerDsSetting -PollingInterval 120

DHCP netsh dhcp server show scope show clients > scopelist.txt

TCS WebEx
username: Tamilselvan1.m
Password: Welcome@123

ntfrsutl forcerepl kdalps02 /r "domain system volume (sysvol share)" /p kau1s059.cna.com

get-aduser -Filter * -SearchBase "OU=Users,DC=example,DC=com" | set-aduser -ChangePasswordAtLogon $True

cnatest Tftp@386


REG ADD " HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\Minimal\MSIServer" /VE /T REG_SZ /F /D "Service
"Service"

Get-Content -Path C:\Users.txt | Get-ADUser |Set-ADAccountControl -PasswordNotRequired $false
Get-ADUser -Filter * -properties |Where-Object {$_.userAccountControl -eq '544'} |Select-Object samaccountname,



net start msiserver 

scavenging 2501 and 2502

get-aduser CAD3498 |Set-ADUser -Clear msRTCSIP-PrimaryUserAddress
Get-ADUser -Filter * -Properties *|Select-Object SamAccountName,EmailAddress,'msRTCSIP-PrimaryUserAddress'

Get-ADUser -Filter * -Properties proxyAddresses |% {$_.proxyAddresses -like "SIP*"}


-SearchBase "ou=FirstOU,dc=domain,dc=com" | ? { ($_.distinguishedname -notlike '*Disabled Users*') }

CNTHWIN7VM

Cloud - Bridge details:
	USA Toll free: 1-866-546-3377
	India International toll free: 1800 200 9472
Host Passcode: 9259972813
Participant Passcode: 7991094429

Wintel - 7489845336
Passcode- 7630330525 

10.10.136.0
10.10.58.0


IMM Login
KAU1P059 or KCH1DE62
w32tm.exe /ntte : Date integer
interger : =IF(C2>0,C2/(8.64*10^11) - 109205,"")


time : w32tm /query /peers

Queve IT.TCS-I.Active Directory Support.EUC - AD
IT.TCS-I.Intel Server Engineering.Server Services - Wintel

frminst.exe /forceuninstall 
c:\Program Files\McAfee\Common Framework\frminst.exe" /forceuninstall 


Offic : C:\Program Files (x86)\Microsoft Office\Office14 cscript ospp.vbs /dhistorykms

Outbox \\kau1p760\APPDEV_OUTBOX\200364bit-32bit_C++


Accoun Lockout 
2003 : 644,529
2008: 4740 ,4771,4625
Bad password : 4625 
Windows 8 SW8CH1-FCWI

PowerShell.exe -command "E:\Screen\PasswordChangeNotification.ps1"

https://afchi.messageone.com/af/showLoginPage.do
user name for message one will be cad3795@It.cna.com

get-aduser -properties * -filter {(Enabled -eq 'true') -and (employeeid -ne 'not set') -and (employeeid -ne 'no read permission') -and (employeeid -notlike 'c*') -and (employeetype -ne 'service')} |select employeeID, SamAccountName, EmailAddress, TelephoneNumber, createTimeStamp, DisplayName, Office  | export-csv "c:\temp\CNASH803.csv"

Old One”:  select * from Win32_OperatingSystem where Version > "6.0%"  (This won’t work because Server Version is also grater then 6.0)
Proposed one: select * from Win32_OperatingSystem where Version > "6.0%" and ProductType=1

Password bad enable : Nltest /DBFlag:2080FFFF
Password bad disable " Nltest /DBFlag:0x0

https://icovc01.cna.com:9443/vsphere-client/
https://icovc02.cna.com:9443/vsphere-client/
Account logout Error :https://mandie.net/2013/04/23/netlogon-log-part-1/
Password policy :https://blogs.technet.microsoft.com/askds/2011/08/05/friday-mail-sack-beard-seconds-edition/#password

18009363100;MS # 800-936-3100  Continental Casualty Company; Code - 001585486
Kote Avaya no : 25627 | Desk no : 0841612824
Sreedher : 25627
UK Vcenters
vw7msptcippajp

IMM KCH1DE62;vc5ch1 ;KAU1P059 
HUGVVCSPROD01.hug.hardygroup.co.uk-Yes
KW3L1S09 - Greenford-NO
KW3L1S08 - London-Yes
KW3L1S38 - Manchester DMZ -No
KW3MNS09 - Manchester -No
KCH1D884 -Jump
NUID : Nc8r7U2n
VSKAU1S210-AD Health Check 

netsh trace start capture=yes
>netsh trace stop


SCCM \\kau1s451\packages\Applications\Workstation\Current\

DNS 6525
Function level http://www.rebeladmin.com/2016/01/step-by-step-guide-to-downgrade-domain-and-forest-functional-level/

\\10.12.239.112\ePo share\MA all versions\McAfee agent 5.0.4

Dv8a5T7h

wbadmin.exe Start SystemStateBackup –backuptarget:E:

Set-DnsServerPrimaryZone -Name "na.blackberry.net" -SecondaryServers "10.31.100.31","10.20.23.188" -SecureSecondaries TransferToSecureServers


Start-ADSyncSyncCycle Initial
svc.aadconnect@cnainsurance.onmicrosoft.com-w9CgDY46 
Kd7b6R1w for o365act
VSKAU1P212	 10.12.15.78	 CNAW2k	 SQL Server	 Aurora	 SQL Installed	 
VCWAU1P0272	 10.12.28.28	 CNAW2k	 AD Connect	 Aurora	 AD Connect completion

SIP Removal 
Get-ADUser proxytest -prop proxyaddresses | % {
$pr = $_.proxyaddresses -like "SIP*"
Set-ADUser $_ -Remove @{proxyaddresses=$pr}
}



https://support.microsoft.com/en-us/help/2090913/troubleshooting-ad-replication-error-2146893022-the-target-principal-n

DHCP LOg :netsh dhcp server \\10.20.23.238 dump > c:\DHCPconf.txt
Get-Content "servers.txt" | (Get-HotFix |select-object __server,HotFixID,InstalledOn | sort installedon)[-1]

Description      HotFixID      InstalledBy          InstalledOn



Remove-DnsServerResourceRecord -ZoneName cna.com -RRType A  -Name 04s-25b-hp4si.cna.com. -RecordData 04s_25b_hp4si.cna.com -force

PSHRTOD-Dv8a5T7h
Surety :KB2641690-v2 
Track IT :\\kw3l1p83.cna.com\TrackIt\Installers\TechnicianClient\en\TechnicianClient_11_4_0_406.application 
DNS : http://intelrequests/intelServerRequests/(va1vtwefeknrut55dhz33z45)/security.aspx
Schedule Task KCH1Xh11
DNS - KCH1DA80

netsh dhcp server export c:\temp\dhcp <10.154.40.0 10.154.52.0>
netsh dhcp server import c:\temp\dhcp <10.154.40.0 10.154.52.0>


List All KMS servers : nslookup -type=all _vlmcs._tcp
Service Account : svc_unmap-Xq2r3B7z

Bridge 31 :18662665000-26662631

get-aduser SamAccountName,userAccountControl

get-content -path c:\users.txt |get-aduser| set-aduser -ChangePasswordAtLogon $True


Password : (&(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=32))
get-content -path c:\uac\users.txt |get-aduser -properties * |where {$_.userAccountControl =521} | select-object userAccountControl,SamAccountName

 
get-content -path c:\UAC\users.txt |Get-ADUser |Set-ADUser -PasswordNeverExpires $false


get-content -path c:\users.txt |Get-ADUser |Set-ADAccountControl -PasswordNotRequired $false


get-content -path c:\UAC\users.txt |Get-ADUser |Set-ADUser -PasswordNeverExpires $true
vcwau1p0369- change Auditor
KAU1P800-Dell Audit
DFS - 
Kau1s043- kch1p504 - kch1p505 -kch1s255
4674,4738
4720 - user account creation
4738 - user account change
4741 - computer account creation
4742 - computer account change
https://social.technet.microsoft.com/wiki/contents/articles/16067.nltest-to-test-the-trust-relationship-between-a-workstation-and-domain.aspx#Determine_SRV_priorities_and_weights_Command_for_trusting_and_trusted_domain


adasldap.cna.com [10.19.120.206] 
can use 389 or 636

https://lbau1p004.cna.com/xui/ 
f5guest



nltest /dclist:cnasurety.net

MSDTC Service Fix:

Run "msdtc -uninstall" from a command prompt
reboot
Run "msdtc -install" from a command promp

KMS Host Key : Office : TMGJ8-HJXXR-X643W-9KY6K-7MQP4

fggWin10 Professional Keys
65055992 Continental Casualty Company 49Y22-T8XTG-DDQJ8-6D87F-PQG7G KMS
Office 2016 Professional Keys
65055992 Continental Casualty Company J8TG7-6TQWK-7GHPP-3DCHW-KQMV4 KMS
Windows Srv 2012R2 DataCtr/Std KMS for Windows 10 
7J3CW-QPT3K-6T3JT-XYWFK-HRVP4 


Need to Check the KEY : 
BTQ4D7-6M6B6-J3XPJ-66863-K9P76
BVMQV-WR7DD-29T2G-36GB9-R2J6Q


local admin @w2kAdmin01a

 
To Register IPSEC Service : regsvr32 polstore.dll 


nltest /SC_RESET:cna.com\KAU1S059
nltest /sc_query



VSKCH1S128 -Need Rebot

LDAP/LDAPS is verified on KAU1S059 KCH1S277 (CNA Domain)
LDAP is verified on LAU1S057 (CNAROOT Domain)
	
2245 SSH

Writers https://replibit.kayako.com/knowledgebase/article/View/54/0/vssadmin-list-writers-and-their-services---vss

. A good alternative may be Jim Wright, if he is not available then Tony Katrib, in the past, has also approved.



UFEI :


1.	Repadmin Syntax http://technet.microsoft.com/en-us/library/cc736571(v=WS.10).aspx 
2.	Ask the Directory Services Team http://blogs.technet.com/b/askds/archive/2010/08/20/friday-mail-sack-scooter-edition.aspx
3.	Active Directory Replication Status Tool http://www.microsoft.com/en-in/download/details.aspx?id=30005
4.	Repadmin /syncall http://technet.microsoft.com/en-us/library/cc835086.aspx
5.	Forcing Replication http://technet.microsoft.com/en-us/library/cc811569(v=ws.10).aspx
6.	Troubleshooting DNS Event ID 4013: The DNS server was unable to load AD integrated DNS zones http://support.microsoft.com/kb/2001093
7.	What does DCDIAG actually… do? http://blogs.technet.com/b/askds/archive/2011/03/22/what-does-dcdiag-actually-do.aspx
8.	Dcdiag Switches http://technet.microsoft.com/en-us/library/cc731968.aspx
9.	How Active Directory Replication Topology Works http://technet.microsoft.com/en-us/library/cc755994(WS.10).aspx
10.	You Are Not Smarter Than The KCC http://blogs.technet.com/b/markmoro/archive/2011/08/05/you-are-not-smarter-than-the-kcc.aspx
11.	Troubleshooting KCC Event Log Errors http://blogs.technet.com/b/askds/archive/2008/10/31/troubleshooting-kcc-event-log-errors.aspx
12.	How Active Directory Replication Topology Works http://technet.microsoft.com/en-us/library/cc755994(v=WS.10).aspx


Get-ADGroupMember -Identity "EUC Operations" |Get-ADUser |Where-Object {$_.Enabled -eq $true} |Select-Object samaccountname,name

Get-ADComputer -SearchBase "OU=Cisco IPCC,DC=cna,DC=com" -Filter * -Properties Operstem |Select-Object Name,OperatingSystem,Enabled  >as.txt

Get-ADComputer -SearchBase "DC=CNA,DC=COm" -Property operatingsystem -Filter * |Where-Object {$_.enabled -eq $True} |Select-Object name,Operatingsystem >as.txt
dsquery * "CN=User Name,OU=User Accounts,DC=sub,DC=domain,DC=com" -attr *

dsquery * -filter "(&(&(objectCategory=computer)(operatingSystem=Windows Server*)))" -limit 0 -attr name operatingsystem >as.txt

dsquery * -filter "(&(&(objectCategory=computer)))" -limit 5000 -attr name operatingsystem >c:\temp\computers.txt
dsquery * -filter "(&(&(objectCategory=user)))" -limit 5000 -attr name samaccountname >c:\temp\users.txt

Get-ADReplicationUpToDatenessVectorTable * | sort Partner,Server | ft Partner,Server,UsnFilter
Imediate Replicate :Get-ADDomainController -filter * | ForEach {Sync-ADObject -object "CN=James, OU=BusinessUsers, DC=Test, DC=Local" -source NKAD1 -destination $_.hostname}
dsquery * -filter "(&(&(objectCategory=group)))" -limit 5000 -attr  cn objectClass >c:\temp\group.txt

Only Enabled Users : dsquery * -filter "(&(&(objectCategory=computer)(!userAccountControl:1.2.840.113556.1.4.803:=2)))" -limit 0 -attr name operatingsystem 
Only disabled computers : dsquery * -filter "(&(&(objectCategory=computer)(userAccountControl:1.2.840.113556.1.4.803:=2)))" -limit 0 -attr name operatingsystem 

Get-ADPrincipalGroupMembership username | select name

Remove-DnsServerResourceRecord -ZoneName "contoso.com" -RRType "A" -Name "Host01" -RecordData "10.17.1.41"
Get-WinEvent  -Computer WS7012 -FilterHashtable @{Logname='Security';ID=4672} -MaxEvents 1| select @{N='User';E={$_.Properties[1].Value}}
Get-EventLog -LogName Security -ComputerName $item -InstanceId 4624 |  select TimeGenerated,MachineName -First 3 
get-EventLog -LogName security -InstanceId 4624 -Newest 1  |fl *

Get-ADUser -SearchBase 'DC=cna,DC=com' -properties mail -Filter '*'|Where-Object {$_.Enabled -eq $true} |Select Samaccountname,Name,mail
Get-ADUser -SearchBase 'DC=cna,DC=com' -properties Displayname -Filter '*'|Where-Object {$_.Enabled -eq $true} |Select Samaccountname,Displayname

AD Subnet :  Get-ADReplicationSubnet -Filter *  |Select-Object Name,Site

get-adcomputer	-id

display lla attributer :dsquery * "CN=SURPHL05,OU=Domain Controllers,DC=cna,DC=com" -attr * -limit 100000

dsquery * -filter "(objectCategory=Computer)" –attr name operatingSystemVersion -limit 500
dsquery * -filter "(objectCategory=Computer)" –attr name operatingSystemVersion
DSQUERY COMPUTER DC=cnasurety,DC=net -name * -scope subtree -limit 0 > c:\ComputersinOU.TXT


Get-ADComputer -SearchBase "DC=cnasurety,DC=net" -Property operatingsystem,IPv4address -Filter * |Where-Object {$_.Enabled -eq $True} |Select-Object name,Operatingsystem,IPv4address,DistinguishedName |format-table -autosize | out-string -width 2000

Subnet information : Get-ADReplicationSubnet -Filter * | select Name,site | group site | select @{Name='Name';Expression={$_.Name.Split(',')[0].Trim('CN=')}},@{Name='Subnets';Expression={$_.Group.Name}}


Service Account List : Get-ADUser -SearchBase 'DC=cna,DC=com' -Properties PasswordNeverExpires -Filter '*'|Where-object {$_.PasswordNeverExpires -eq $true} |Select Samaccountname,Name |format-table -autosize | out-string -width 2000

Service Account " Get-ADUser -SearchBase 'DC=cna,DC=com' -Properties PasswordNeverExpires,info -Filter '*'|Where-object {$_.PasswordNeverExpires -eq $true -AND $_.Enabled -eq $true } |Select Samaccountname,Name,info |format-table -autosize | out-string -width 20000
Get-ADGroupMember -Identity Allserviceaccounts |Select-Object samaccountname,objectclass


Get-ADUser -SearchBase 'DC=cna,DC=com' -Properties SamAccountName,CN,GivenName,Enabled,AccountExpirationDate,whenCreated,employeeType,LastLogonDate,PasswordNeverExpires,DistinguishedName,Modified,mail |Select SamAccountName,CN,GivenName,Enabled,AccountExpirationDate,whenCreated,employeeType,LastLogonDate,PasswordNeverExpires,DistinguishedName,Modified,mail |format-table -autosize | out-string -width 20000

Get-ADUser -SearchBase 'DC=cna,DC=com' -Properties SamAccountName,CN,GivenName,Enabled,AccountExpirationDate,whenCreated,employeeType,LastLogonDate,PasswordNeverExpires,DistinguishedName,modifyTimeStamp,EmailAddress -filter *' |Select SamAccountName,CN,GivenName,Enabled,whenCreated,employeeType,LastLogonDate,PasswordNeverExpires,DistinguishedName,AccountExpirationDate |format-table -autosize | out-string -width 20000

Get-ADUser -SearchBase 'DC=cna,DC=com' -Properties SamAccountName,CN,GivenName,Enabled,AccountExpirationDate,whenCreated,employeeType,LastLogonDate,PasswordNeverExpires,DistinguishedName,modifyTimeStamp,EmailAddress -filter '*' |Select SamAccountName,CN,modifyTimeStamp,EmailAddress |format-table -autosize | out-string -width 20000


Get-ADUser -SearchBase 'OU=IBM Contractors,OU=Managed Services,OU=US,DC=cna,DC=com' -Properties SamAccountName,CN,GivenName,Enabled,AccountExpirationDate,whenCreated,employeeType,LastLogonDate,PasswordNeverExpires,DistinguishedName,modifyTimeStamp,EmailAddress -filter *' |Select SamAccountName,CN,GivenName,Enabled,whenCreated,LastLogonDate,DistinguishedName,AccountExpirationDate |format-table -autosize | out-string -width 20000

DHCP : netsh dhcp server scope 172.16.11.0 show clients
Netsh DHCP Server \\<servername> show mibinfo


Get-ADUser -identity cad3500 -Properties SamAccountName,CN,GivenName,Enabled,AccountExpirationDate,whenCreated,employeeType,LastLogonDate,PasswordNeverExpires,DistinguishedName,modifyTimeStamp,EmailAddress |Select SamAccountName,CN,modifyTimeStamp,EmailAddress |format-table -autosize | out-string -width 20000

Replication : repadmin /showrepl * /csv | ConvertFrom-Csv | Out-GridView

Invoke-Command -ComputerName vcwch1c0339.cna.com -ScriptBlock {hostname} -Credential cnaw2k\cad3500a

Get-ADComputer -SearchBase "OU=Citrix,OU=Resources,DC=cna,DC=com" -filter * |Where-Object {$_.Enabled -eq $True} |Select-Object name,Operatingsystem,IPv4address,DistinguishedName |format-table -autosize | out-string -width 2000

Add-ADGroupMember -Identity GPO_US_MinipilotScreensaver -Member (Get-Content C:\Temp\Comp.txt)e f

Get-Content "c:\serverlist.txt" | % { Get-ADComputer -Filter { 'Name -eq $_' } } | Remove-ADComputer -force -confirm:$false -whatif
Get-Content ComputersToDelete.txt | % { Get-ADComputer -Filter { Name -eq $_ } } | Remove-ADComputer -WhatIf
wmic qfe
Patch : get-wmiobject -class win32_quickfixengineering |Select-Object __server,HotFixID,InstalledOn

Ignio P@ssw0rd
Get-Content C:\temp\Comp.txt | ForEach-Object{Get-ADComputer $_ -Properties Name,LastLogonDate} |Select-Object name,lastlogondate 

Get event log Details : Get-EventLog -LogName System -After (Get-Date -Date '2/8/2017') -Before (Get-Date -Date '2/8/2017')
madam 
Get-ADPrincipalGroupMembership cad3500a |select name
import-csv C:\TEMP\GROUP.csv | % {Add-ADGroupMember $_.groupname –Member CAD3500A

Multiple User Informaiton  : Get-Content C:\temp\comp.txt | Get-ADUser -Properties * | Select-Object Name,

SID to User 

Get-ADComputer -SearchBase "DC=cnatest,dc=com" -filter * -properties *|Select-Object name,Enabled,OperatingSystem

$objSID = New-Object System.Security.Principal.SecurityIdentifier 
    ("S-1-5-21-670625144-652392133-3660302365-498")
$objUser = $objSID.Translate( [System.Security.Principal.NTAccount])
$objUser.Value


Get-ADComputer -SearchBase "DC=cna,dc=com" -filter * |Select-Object name,OperatingSystem,LastLogonDate,Enabled,PasswordLastSet |format-table -autosize | out-string -width 2000


Get-ADComputer -SearchBase "OU=Windows 8,OU=Workstations,DC=cna,dc=com" -filter * |Select-Object name,OperatingSystem,@{Name="Stamp"; Expression={[DateTime]::FromFileTime($_.lastLogonTimestamp)}}

cna.com/Workstations/Windows 8
117020115255076
uninstall : 
$app = Get-WmiObject Win32_Product -ComputerName "Kw3l1p54" | where { $_.name -eq "*Mcafee Agent*" }
$app.Uninstall()


http://iepaceurope.cna.com/cnaeuropehardy.pac
Sync Skype : Start-ADSyncSyncCycle delta


Import-csv C:\Temp\UserList.csv | % {
$Sam = $_.SamAccount
$SIP = $_.SipAddress
Set-ADUser $Sam -Add @{ProxyAddresses="SIP:$($SIP)"}
}  



del file :psexec -s @C:\temp\ALL_hosts_Cluster_Nodes_2008.txt cmd /c del c:\Users\cleansolidcore.exe

delete OLD fils : ForFiles /p "C:\delete" /s /d -10 /c  "cmd /c del /q @file"

-------------------------------
Inactive COmputer List 

# Gets time stamps for all computers in the domain that have NOT logged in since after specified date 
# Mod by Tilo 2013-08-27 
import-module activedirectory  
$domain = "domain.mydom.com"  
$DaysInactive = 90  
$time = (Get-Date).Adddays(-($DaysInactive)) 
  
# Get all AD computers with lastLogonTimestamp less than our time 
Get-ADComputer -Filter {LastLogonTimeStamp -lt $time} -Properties LastLogonTimeStamp | 
  
# Output hostname and lastLogonTimestamp into CSV 
select-object OperatingSystem,Name,@{Name="Stamp"; Expression={[DateTime]::FromFileTime($_.lastLogonTimestamp)}} | export-csv OLD_Computer.csv -notypeinformation

-------------

Office 2010 32-bit:  C:\Program Files (x86)\Microsoft Office\Office14
Office 2010 64-bit:  C:\Program Files\Microsoft Office\Office14
Office 2013 32-bit:  C:\Program Files (x86)\Microsoft Office\Office15
Office 2013 64-bit:  C:\Program Files\Microsoft Office\Office15
Example:  cd C:\Program Files\Microsoft Office\Office15
Then enter this to activate : cscript ospp.vbs /act
cscript ospp.vbs  /dhistorykms


2003: setspn -A HTTP/ete4-ccecmapp.cna.com ete4-ccecmapp
2012: setspn -s HTTP/ete4-ccecmapp.cna.com ete4-ccecmapp
setspn -l ete4-ccecmapp


Request 
1. Create Service account for service ete4-ccecmapp.cna.com in AD.
2. Create and register Service Principal Name for ete4-ccecmapp.cna.com in AD.
3. Create Keytab file ete4-ccecmapp_HTTP.keytab in AD.
4. Send Keytab file to ete4-ccecmapp.cna.com owners and ISAM team.



ktpass -princ HTTP/sch1h800.cna.com@CNA.COM -mapuser sch1h800 -pass AB2017ab -ptype KRB5_NT_PRINCIPAL -crypto All -out sch1h800.keytab
ktpass -princ HTTP/ete4-ccecmapp.cna.com@CNA.COM -pass ABCD -mapuser ete4-ccecmapp@cna.com -out C:\ete4-ccecmapp_HTTP.keytab -mapOp set



ktpass -princ HTTP/drt1-resourcelibrary.cna.com@CNA.COM -pass <password> -mapuser drt1-resourcelibrary@cna.com -out C:\drt1-resourcelibrary_HTTP.keytab -mapOp set




* Create keytab of keytab file for the service drt1-resourcelibrary.cna.com
 * Assign the name drt1-resourcelibrary.cna.com_HTTP.keytab
 * No password expiration


setspn -A HTTP/drt1-resourcelibrary.cna.com drt1-resourcelibrary

ktpass -princ HTTP/drt1-sdm.cna.com@CNA.COM -pass AB2015ab -mapuser drt1-sdm@cna.com -out C:\temp\drt1-sdm.cna.com_HTTP.keytab -mapOp set

cut4-sdm.cna.com, ete4-sdm.cna.com and drt1-sdm.cna.com. 
2003: setspn -a HTTP/cut4-sdm.cna.com cut4-sdm
setspn -a HTTP/ete4-sdm.cna.com ete4-sdm
setspn -a HTTP/drt1-sdm.cna.com drt1-sdm





Error :13568


bcdedit /export C:\BCD_Backup
c:
cd boot
attrib bcd -s -h -r
ren c:\boot\bcd bcd.old
bootrec /RebuildBcd

Installd on : 1040 log


714-922-5543
mark wines
630-415-8394 630-493-1680 Paul aho
keep it saved

VCWCH1P0149-CHicago DHCP-10.13.100.182
VCWAU1P0381-Aurora-10.12.22.242

PSEXEC \\KAU1S188 MsiExec.exe /X{432DB9E4-6388-432F-9ADB-61E8782F4593}

MsiExec.exe /X{432DB9E4-6388-432F-9ADB-61E8782F4593}


To change this registry parameter, run regedit. 
 del /s *.wlx - delete files with Specific extension 
Click on Start, Run and type regedit. 
 Ignio Password :2o2wGzKs
Expand HKEY_LOCAL_MACHINE. 
Click down the key path: 
   "System\CurrentControlSet\Services\NtFrs\Parameters" 
Double click on the value name 
   "Enable Journal Wrap Automatic Restore" 
and update the value. 
select * from Win32_OperatingSystem where Version like '10.%' or Version like "6.1%" and ProductType=1

select * from Win32_OperatingSystem where Version like "6.1%"

select * from Win32_OperatingSystem where Version like "6.3%"
Get-EventLog -LogName System -After (Get-Date -Date '2/8/2017') -Before (Get-Date -Date '2/8/2017')


Usage 
cscript ospp.vbs /Option:Value ComputerName User Password 
     ComputerName: Name of remote computer. If a computer name is not passed local computer is used. 
     User: Account with required privilege on remote computer.  
     Password: Password for the account. If a User account and password are not passed current credentials are used. 
     Value: Required for outlined options. 
 


Global /Options 

Description  

/act Activate installed Office 2010 product keys.  
/inpkey:value Install a product key (replaces existing key) with user-provided product key. Value parameter applies. 
/unpkey:value Uninstall an installed product key with user-provided partial product key (as displayed by the /dstatus option).  Value parameter applies. 
/inslic:value Install a license with user-provided path to the .xrm-ms license. Value parameter applies. 
/dstatus Display license information for installed product keys. 
/dstatusall Display license information for installed licenses. 
/dhistoryacterr Display MAK/Retail activation failure history. 
/dinstid Display installation ID for offline activation. 
/actcid:value Activate product with user-provided confirmation ID. Value parameter applies. 
/puserops Permit administrator-privileged license operations including internet/telephone activation by standard users. 
/duserops Deny administrator-privileged license operations including internet/telephone activation by standard users. 
/ddescr:value Display the description for a user-provided error code.  Value parameter applies. 

KMS client /Options 

Description  

/dhistorykms Display KMS client activation history. 
/dcmid Display KMS client machine ID (CMID). 
/sethst:value Set a KMS host name with user-provided host name.  Value parameter applies. 
/setprt:value Set a KMS port with user-provided port number.  Value parameter applies. 
/remhst Remove KMS host name (sets port to default). 

OSPPSVC /Options  
MXPCH1-ENC3 - do not delete
MXPCH1-ENC3, ENC4, ENC5
w32tm /query /status

Exception :https://itcollab.cna.com/eng/sourcing/transition/Group%201%20%20Security/Forms/AllItems.aspx?RootFolder=%2Feng%2Fsourcing%2Ftransition%2FGroup%201%20%20Security%2FGovernance%20and%20Risk%20Compliance%2F2017%5FTech%20Spec%20Review&FolderCTID=0x012000120BDD8B63D4304891CB251FB69BAA71&View=%7BA46F94F2%2D28BD%2D443C%2D807E%2DF4E36278886F%7D 
Patch : wmic qfe get HotfixID,ServicePackInEffect,InstallDate,InstalledBy,InstalledOn

Description  

/osppsvcrestart Restart Office Software Protection Platform service. 
/osppsvcauto Set Office Software Protection Platform service startup type to automatic. 

Token /Options  

Description  

/dtokils Display installed token-based activation issuance licenses. 
/rtokil:value Uninstall an installed token-based activation issuance license with user-provided license id (as displayed by the /dtokils option).  Value parameter applies. 
/stokflag Set token-based activation only flag. 
/ctokflag Clear token-based activation only flag. 
/dtokcerts Display token-based activation certificates. 
/tokact:value1:value2 Token activate with a user-provided thumbprint (as displayed by the /dtokcerts option)  


select * from Win32_OperatingSystem WHERE Version like "6.1%" AND ProductType="1" AND OSArchitecture = "64-bit"
select * from Win32_OperatingSystem WHERE ProductType = "1" AND NOT OSArchitecture = "64-bit" 
select * from Win32_OperatingSystem where Version like "5.2%" and Caption like "%x64%"
select * from Win32_OperatingSystem where Version like "5.2%" and Caption not like "%x64%"

select * from Win32_OperatingSystem where Caption like "%x64%"
select * from Win32_OperatingSystem where Caption not like "%x64%"
Any Windows Desktop OS – 64-bit: 
select * from Win32_OperatingSystem WHERE ProductType = "1" AND OSArchitecture = "64-bit"
Select * from Win32_OperatingSystem Where Version like "6.1%" and ProductType = "1"

Any Windows Server OS 
select * from Win32_OperatingSystem where (ProductType = "3") OR (ProductType = "3")

Any Windows Server OS – 32-bit 
select * from Win32_OperatingSystem where (ProductType = "2") OR (ProductType = "3") AND NOT OSArchitecture = "64-bit"

Any Windows Server OS – 64-bit 
select * from Win32_OperatingSystem where (ProductType = "2") OR (ProductType = "3") AND OSArchitecture = "64-bit"

Any Windows Server – Domain Controller 
select * from Win32_OperatingSystem where (ProductType = "2")

Any Windows Server – Domain Controller – 32-bit 
select * from Win32_OperatingSystem where (ProductType = "2") AND NOT OSArchitecture = "64-bit"
Any Windows Server – Domain Controller – 64-bit 
select * from Win32_OperatingSystem where (ProductType = "2") AND OSArchitecture = "64-bit"
Any Windows Server – Non-Domain Controller 
select * from Win32_OperatingSystem where (ProductType = "3")
Any Windows Server – Non- Domain Controller – 32-bit 
select * from Win32_OperatingSystem where (ProductType = "3") AND NOT OSArchitecture = "64-bit"
Any Windows Server – Non-Domain Controller – 64-bit 
select * from Win32_OperatingSystem where (ProductType = "3") AND OSArchitecture = "64-bit"

Windows Server 2003 – DC 
select * from Win32_OperatingSystem WHERE Version like "5.2%" AND ProductType="2"
Windows Server 2003 – non-DC 
select * from Win32_OperatingSystem WHERE Version like "5.2%" AND ProductType="3"
Windows Server 2003 – 32-bit – DC 
select * from Win32_OperatingSystem WHERE Version like "5.2%" AND ProductType="2" AND NOT OSArchitecture = "64-bit"
Windows Server 2003 – 32-bit – non-DC 
select * from Win32_OperatingSystem WHERE Version like "5.2%" AND ProductType="3" AND NOT OSArchitecture = "64-bit"
Windows Server 2003 – 64-bit – DC 
select * from Win32_OperatingSystem WHERE Version like "5.2%" AND ProductType="2" AND OSArchitecture = "64-bit"
Windows Server 2003 – 64-bit – non-DC 
select * from Win32_OperatingSystem WHERE Version like "5.2%" AND ProductType="3" AND OSArchitecture = "64-bit"

Windows Server 2003 R2 – DC 
select * from Win32_OperatingSystem WHERE Version like "5.2.3%" AND ProductType="2"
Windows Server 2003 R2 – non-DC 
select * from Win32_OperatingSystem WHERE Version like "5.2.3%" AND ProductType="3"
Windows Server 2003 R2 – 32-bit – DC 
select * from Win32_OperatingSystem WHERE Version like "5.2.3%" AND ProductType="2" AND NOT OSArchitecture = "64-bit"
Windows Server 2003 R2 – 32-bit – non-DC 
select * from Win32_OperatingSystem WHERE Version like "5.2.3%" AND ProductType="3" AND NOT OSArchitecture = "64-bit"
Windows Server 2003 R2 – 64-bit – DC 
select * from Win32_OperatingSystem WHERE Version like "5.2.3%" AND ProductType="2" AND OSArchitecture = "64-bit"
Windows Server 2003 R2 – 64-bit – non-DC 
select * from Win32_OperatingSystem WHERE Version like "5.2.3%" AND ProductType="3" AND OSArchitecture = "64-bit"
WINDOWS SERVER 2008

Windows Server 2008 – DC 
select * from Win32_OperatingSystem WHERE Version like "6.0%" AND ProductType="2"
Windows Server 2008 – non-DC 
select * from Win32_OperatingSystem WHERE Version like "6.0%" AND ProductType="3"
Windows Server 2008 – 32-bit – DC 
select * from Win32_OperatingSystem WHERE Version like "6.0%" AND ProductType="2" AND NOT OSArchitecture = "64-bit"
Windows Server 2008 – 32-bit – non-DC 
select * from Win32_OperatingSystem WHERE Version like "6.0%" AND ProductType="3" AND NOT OSArchitecture = "64-bit"
Windows Server 2008 – 64-bit – DC 
select * from Win32_OperatingSystem WHERE Version like "6.0%" AND ProductType="2" AND OSArchitecture = "64-bit"
Windows Server 2008 – 64-bit – non-DC 
select * from Win32_OperatingSystem WHERE Version like "6.0%" AND ProductType="3" AND OSArchitecture = "64-bit"
WINDOWS SERVER 2008 R2

Windows Server 2008 R2 – 64-bit – DC 
select * from Win32_OperatingSystem WHERE Version like "6.1%" AND ProductType="2"
Windows Server 2008 R2 – 64-bit – non-DC 
select * from Win32_OperatingSystem WHERE Version like "6.1%" AND ProductType="3"
WINDOWS SERVER 2012

Windows Server 2012 – 64-bit – DC 
select * from Win32_OperatingSystem WHERE Version like "6.2%" AND ProductType="2"
Windows Server 2012 – 64-bit – non-DC 
select * from Win32_OperatingSystem WHERE Version like "6.2%" AND ProductType="3"
WINDOWS SERVER 2012 R2

Windows Server 2012 R2 – 64-bit – DC 
select * from Win32_OperatingSystem WHERE Version like "6.3%" AND ProductType="2"
Windows Server 2012 R2 – 64-bit – non-DC 
select * from Win32_OperatingSystem WHERE Version like "6.3%" AND ProductType="3"
WINDOWS SERVER 2016

Windows Server 2016 – 64-bit – DC 
select * from Win32_OperatingSystem WHERE Version like "10.0%" AND ProductType="2"
Windows Server 2016 – 64-bit – non-DC 
select * from Win32_OperatingSystem WHERE Version like "10.0%" AND ProductType="3"



WINDOWS 7

Windows 7 
select * from Win32_OperatingSystem WHERE Version like "6.1%" AND ProductType="1"
Windows 7 – 32-bit 
select * from Win32_OperatingSystem WHERE Version like "6.1%" AND ProductType="1" AND NOT OSArchitecture = "64-bit"
Windows 7 – 64-bit 
select * from Win32_OperatingSystem WHERE Version like "6.1%" AND ProductType="1" AND OSArchitecture = "64-bit"
WINDOWS 8

Windows 8 
select * from Win32_OperatingSystem WHERE Version like "6.2%" AND ProductType="1"
Windows 8 – 32-bit 
select * from Win32_OperatingSystem WHERE Version like "6.2%" AND ProductType="1" AND NOT OSArchitecture = "64-bit"
Windows 8 – 64-bit 
select * from Win32_OperatingSystem WHERE Version like "6.2%" AND ProductType="1" AND OSArchitecture = "64-bit"
WINDOWS 8.1

Windows 8.1 
select * from Win32_OperatingSystem WHERE Version like "6.3%" AND ProductType="1"
Windows 8.1 – 32-bit 
select * from Win32_OperatingSystem WHERE Version like "6.3%" AND ProductType="1" AND NOT OSArchitecture = "64-bit"
Windows 8.1 – 64-bit 
select * from Win32_OperatingSystem WHERE Version like "6.3%" AND ProductType="1" AND OSArchitecture = "64-bit"
WINDOWS 10

Windows 10 
select * from Win32_OperatingSystem WHERE Version like "10.0%" AND ProductType="1"
Windows 10 – 32-bit 
select * from Win32_OperatingSystem WHERE Version like "10.0%" AND ProductType="1" AND NOT OSArchitecture = "64-bit"
Windows 10 – 64-bit 
select * from Win32_OperatingSystem WHERE Version like "10.0%" AND ProductType="1" AND OSArchitecture = "64-bit"

Windows Server 2012
select * from Win32_OperatingSystem where Version like "6.2%" and ProductType = "3"
Windows 8
select * from Win32_OperatingSystem where Version like "6.2%" and ProductType = "1"
Windows Server 2008 R2
select * from Win32_OperatingSystem where Version like "6.1%" and ProductType = "3"
Windows 7
select * from Win32_OperatingSystem where Version like "6.1%" and ProductType = "1"
Windows Server 2008
select * from Win32_OperatingSystem where Version like "6.0%" and ProductType = "3"

Windows Vista and Windows Server 2008

select * from Win32_OperatingSystem where Version like "6.0%" and ProductType<>"2"

Windows Server 2003 and Windows Server 2008
select * from Win32_OperatingSystem where (Version like "5.2%" or Version like "6.0%") and ProductType="3"
Windows 2000, XP and 2003
select * from Win32_OperatingSystem where Version like "5.%" and ProductType<>"2


ProductType="1" -> Client operating systems

ProductType="2" -> Domain controllers

ProductType="3" -> Servers that are not domain controllers


5.2 – Windows Server 2003

5.2.3 – Windows Server 2003 R2

6.0 – Windows Vista & Windows Server 2008

6.1 – Windows 7 & Windows Server 2008 R2

6.2 – Windows 8 & Windows Server 2012


AUdit select * from Win32_OperatingSystem where Version <="6.0%" and ProductType >="2"

6.3 – Windows 8.1 & Windows Server 2012 R2

10.0 – Windows 10 & Windows Server 2016

select * from Win32_OperatingSystem WHERE ProductType="1" or ProductType="2"


HDFC Food : ASHOKSELVA1 CE3PG8KM7
nltest /dnsgetdc:cof.ds.capitalone.com
nltest /dclist:cof.ds.capitalone.com
nltest /server:MDCVMVIEWRD41 /dsgetsite
AMEX ashokselva ashok#12345 376933506241007 1826 02/2018
Passport K2729223 25/2/2023
frminst.exe /Forceuninstall
[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\McAfeeFramework]
WWN No : Get-WmiObject -class MSFC_FCAdapterHBAAttributes -namespace “root\WMI” | ForEach-Object {(($_.NodeWWN) | ForEach-Object {“{0:x}” -f $_}) -join “:”}
KMS server List : nslookup -type=srv _vlmcs._tcp
Sun Direct 41010712648 & 41045864158
winmgmt /resetRepository 
Port used for netstat -aon


DHCP 

netsh dhcp server export c:\temp\dhcp <10.154.40.0 10.154.52.0>
netsh dhcp server import c:\temp\dhcp
The following command activates a scope:

> netsh dhcp server \\<ServerName> scope <SubnetID> set state 1
And this command deactivates a scope:

> netsh dhcp server \\<ServerName> scope <SubnetID> set state 0



---- WMI Issue -----
sc config winmgmt start= disabled
net stop winmgmt /y
Winmgmt /salvagerepository %windir%\System32\wbem
Winmgmt /resetrepository %windir%\System32\wbem
sc config winmgmt start= auto
net stop “windows management instrumentation”   winmgmt /salvagerepository
PAPA 47211630 Welcome10 08471050063061 




fsutil fsinfo ntfsinfo
 

1.  Log into server and open disk management.
2.  Locate unallocated LUNS and verify they are online. (LUNS are available, no reboot is required.)
3.  If not online, right click and "initialize" and then right click and "online".
4.  Open a command prompt and start diskpart.
5.  Select the LUN number as appropriate and issue the command "Create partition primary align = 64"
6.  Disk should be partitioned at this point, proceed with all other LUNS in scope.
7.  Close command prompt.
8.  In disk management, select each newly created partition and add a mount point per below.
Mountpoint Name  Location               Storage Type     Size in GB
DATA3          F:\DBDATA\DATA3          General Tier       102
LOG2             F:\DBLOGS\LOG2             Performance Tier             68
9.  Once added, right click and format the volumes with a 64K File Allocation Unit size (Quick Format)
10.  Close any open windows, as task is complete. Log out.

wmic partition get BlockSize, StartingOffset, Name, Index



psexec \\KDCPPRODCMS23 cmd /c net localgroup "administrators" ^& hostname ^& netsh interface ipv4 show dnsservers ^& wmic logicaldisk get size,caption >c:\%computername%.txt

---------Empty folers list-------

dir -recurse | Where-Object { $_.PSIsContainer } |   Where-Object { $_.GetFiles().Count -eq 0 } |   Where-Object { $_.GetDirectories().Count -eq 0 } | ForEach-Object { $_.FullName } >empty.txt

-------------QA Check Sheet-------------
Title QA Check Sheet %computername%
ipconfig /all | find "IPv4 Address" 
Pause
@ECho OFF
reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy\History" /v MachineDomain
Pause
SLmgr.vbs /dlv
Pause
gpedit.msc
Pause
@Echo On
ipconfig /all | find "IPv6"
@Echo OFF
msg "%username%" Please Check the IPV6 disable status
Pause
net localgroup administrators
Pause
set STYPE=
FOR /F "tokens=3 delims= " %%i IN ('reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion" /V CurrentVersion') DO set STYPE=%%i
echo System Type:%STYPE%
IF /i "%stype%" == "6.0" GOTO ENT
IF /i "%stype%" == "6.1" GOTO R2
:R2
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{421F3D82-B781-4221-8528-794FE8813CE4} /v Displayname
GOTO NEXT
:ENT
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{2AA64141-A6A9-439B-BCFF-A02797C0CA4B} /V Displayname
GOTO NEXT
:NEXT
Pause
wmic qfe get /format:list | find "InstalledOn"
Pause
set SMAN=
FOR /F "tokens=3 delims= " %%i IN ('reg query "HKEY_LOCAL_MACHINE\HARDWARE\DESCRIPTION\System\BIOS" /v SystemManufacturer') DO set SMAN=%%i
echo System Type:%SMAN%
IF /I "%SMAN%" == "VMware," ( GOTO :VM ) ELSE ( GOTO :PHY )
:PHY
msg "%username%" Please Check the NIC TEAM Configuration
ncpa.cpl
GOTO NEXT1
:VM
Ncpa.cpl
GOTO NEXT1
:NEXT1
reg query "HKEY_LOCAL_MACHINE\HARDWARE\DESCRIPTION\System\BIOS" /v SystemManufacturer
Pause
gpresult /z | find "%computername%"
Pause
reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Group Policy\Scripts\Startup\0" /v SOM-ID
Pause
Appwiz.cpl
Pause

------- DOT Net 4.0------------------

@echo off
servermanagercmd.exe -install NET-Framework-Core 
IF EXIST "c:\.net" (GOTO FileCopy) ELSE (GOTO create)
:create
Mkdir C:\.net
Echo Creating folder named .net in C drive
pause 
:FileCopy
Echo Copying Files To The Local Drive
Copy \\10.60.8.98\Applications\Framework\2-DotNet40x86x64.exe c:\.net 
cd\ 
cd .net 
IF EXIST "c:\.net\2-DotNet40x86x64.exe" (GOTO Install) ELSE (GOTO FileCopy)
:Install
2-DotNet40x86x64.exe -s /passive /qn 
Pause 
appwiz.cpl 
pause
:Delete
timeout 60
rmdir c:\.net /s /q
IF EXIST "c:\.net" (GOTO Delete) ELSE (GOTO Exit)
:Exit
Pause

------Install & configure Bitlocker------------

powershell Set-ExecutionPolicy RemoteSigned
copy \\10.60.8.98\Applications\Bitlock\bitlocker.ps1 %userprofile%\desktop\
pause
powershell %userprofile%\desktop\bitlocker.ps1
cd %userprofile%\desktop
%userprofile%\desktop\bitlocker.bat >%computername%.txt
cmd


------Status Bitlocker------------
copy %userprofile%\desktop\%computername%.txt \\10.60.8.98\Applications\Bitlock
pause
timeout 1500
manage-bde -status
pause

------ Server Directory information --------
cd..
Cd c:\documents and settings
net use y: \\10.60.8.98\applications\Hotel
dir /o-D | find "2013">y:\%computername%_profiles2013.txt
net localgroup administrators >>y:\%computername%_profiles2013.txt
net use y: /delete
Pause

---Copy Folder Structure ----

XCOPY c:\Windows d:\temp\Windows /E /T /I
---------------------------

----------Un install Commwault ------
msiexec /uninstall "{6196CE06-843A-4680-87E6-6AE4EBF31B0A}" /q /log "data.txt"  Data Agent

MsiExec.exe /Uninstall "{2AA64141-A6A9-439B-BCFF-A02797C0CA4B}" /q /log "base.txt" Base

FINDSTR /L /C:"2013" as.txt

-------- Disjoin machine From domain--------

ipconfig /all > \\10.60.8.98\Applications\Decomm\%computername%.txt
Net user lanadmin Cyber@rk
net user /add temp Cyber@rk
net localgroup administrators temp /add
net user administrator Cyber@rk
pause
copy \\10.60.8.98\Applications\Decomm\netdom.exe %windir%\system32\
pause
Echo off
set /p user="Please enter your a-eid:"
set /p pass="Please enter your password:"
Echo on
netdom remove /d:workgroup %computername% /ud:%user% /pd:%pass% /reboot:10
Pause

--------Post Provisioning COF-------
Hostname
Systeminfo >%userprofile%\Desktop\systeminfo.txt
FINDSTR /L /C:"System Model:" %userprofile%\Desktop\systeminfo.txt
Pause
FINDSTR /L /C:"OS Name:" %userprofile%\Desktop\systeminfo.txt
Pause
FINDSTR /L /C:"System Type:" %userprofile%\Desktop\systeminfo.txt
Pause
FINDSTR /L /C:"Total Physical Memory:" %userprofile%\Desktop\systeminfo.txt
pause
FINDSTR /L /C:"Processor(s):" %userprofile%\Desktop\systeminfo.txt
Pause
FINDSTR /L /C:"Network Card(s):" %userprofile%\Desktop\systeminfo.txt
Pause
wmic logicaldisk get size,caption
Pause
FINDSTR /L /C:"Domain:" %userprofile%\Desktop\systeminfo.txt
Pause
Iisreset /status
pause
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\InetStp /v PathWWWRoot
Pause
ipconfig /all | find "IPv4 Address"
Pause
ipconfig /all | find "Default Gateway "
pause
ipconfig /all | find "Subnet Mask"
Pause
Echo Please uncheck the IPV6 manually
Pause
Ncpa.cpl
Pause
netsh interface ipv4 show dnsservers
Pause
netsh interface ipv4 set dnsserver name="local area connection" static 10.4.19.102 
Netsh interface ipv4 add dns "Local Area Connection" 10.4.19.105 index=2
Netsh interface ipv4 add dns "Local Area Connection" 10.69.100.149 index=3
Netsh interface ipv4 add dns "Local Area Connection" 10.69.100.150 index=4
Pause
netsh interface ipv4 show dnsservers
Pause
Echo please compare the DNS list in the document
Pause
ipconfig /flushdns
Ipconfig /registerdns
Pause
net localgroup administrators
Echo Verify the Appropriate Groups are available
net user lanadmin Cyber@rk
Pause
Echo Please uncheck the password never expair for Lanadmin
ServerManager.msc
pause
gpedit.msc
pause
slmgr.vbs /dlv
pause
Tasklist | find "enstart"
Pause
reg Query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{1FDB8EC6-BAF1-42F9-8E09-4D9AB369F1B5} /v DisplayName
Pause
reg Query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{2AA64141-A6A9-439B-BCFF-A02797C0CA4B} /V Installdate
Pause
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{2AA64141-A6A9-439B-BCFF-A02797C0CA4B} /V Displayicon
Pause
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{B7643B11-A60E-4A33-A465-263FEB32113A} /V DisplayName
pause
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{132F7D38-FA45-11D5-BDC3-00104B938A09} /V DisplayName
Pause
appwiz.cpl
Pause
Pause
\\10.37.222.111\CLIENT\SCCM2012_Agent_Install-v2.bat
Pause


--------Post Provisioning DQA-------
Hostname
Systeminfo >%userprofile%\Desktop\systeminfo.txt
FINDSTR /L /C:"System Model:" %userprofile%\Desktop\systeminfo.txt
Pause
FINDSTR /L /C:"OS Name:" %userprofile%\Desktop\systeminfo.txt
Pause
FINDSTR /L /C:"System Type:" %userprofile%\Desktop\systeminfo.txt
Pause
FINDSTR /L /C:"Total Physical Memory:" %userprofile%\Desktop\systeminfo.txt
pause
FINDSTR /L /C:"Processor(s):" %userprofile%\Desktop\systeminfo.txt
Pause
FINDSTR /L /C:"Network Card(s):" %userprofile%\Desktop\systeminfo.txt
Pause
wmic logicaldisk get size,caption
Pause
FINDSTR /L /C:"Domain:" %userprofile%\Desktop\systeminfo.txt
Pause
Iisreset /status
pause
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\InetStp /v PathWWWRoot
Pause
ipconfig /all | find "IPv4 Address"
Pause
ipconfig /all | find "Default Gateway "
pause
ipconfig /all | find "Subnet Mask"
Pause
Echo Please uncheck the IPV6 manually
Pause
Ncpa.cpl
Pause
netsh interface ipv4 show dnsservers
Pause
netsh interface ipv4 set dnsserver name="local area connection" static 10.8.145.95 register=none
Netsh interface ipv4 add dns "Local Area Connection" 10.69.193.15 index=2
Pause
netsh interface ipv4 show dnsservers
Pause
Echo please compare the DNS list in the document
Pause
ipconfig /flushdns
net localgroup administrators
Echo Verify the Appropriate Groups are available
net user lanadmin Cyber@rk
Pause
Echo Please uncheck the password never expair for Lanadmin
ServerManager.msc
pause
gpedit.msc
pause
slmgr.vbs /dlv
pause
Tasklist | find "enstart"
Pause
reg Query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{1FDB8EC6-BAF1-42F9-8E09-4D9AB369F1B5} /v DisplayName
Pause
reg Query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{2AA64141-A6A9-439B-BCFF-A02797C0CA4B} /V Installdate
Pause
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{2AA64141-A6A9-439B-BCFF-A02797C0CA4B} /V Displayicon
Pause
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{B7643B11-A60E-4A33-A465-263FEB32113A} /V DisplayName
pause
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{132F7D38-FA45-11D5-BDC3-00104B938A09} /V DisplayName
Pause
appwiz.cpl
Pause
Pause
\\10.37.222.111\CLIENT\SCCM2012_Agent_Install-v2.bat
Pause

---------------PP for COF and DQA DR ATM ---------------

Title Post Provision For COF,DQA and ATM %computername%
rem @echo off
set log=%userprofile%\Desktop\%computername%.log
echo **********************************************************************************
echo ********************************************************************************** >%LOG%
echo Post Provisioning stating %DATE% %TIME% >>%LOG%
echo **********************************************************************************
echo ********************************************************************************** >>%LOG%
ECHO Post Provisioning starting on %COMPUTERNAME% %DATE% %TIME%  >>%log%
Hostname
@ECHO off
color B
Systeminfo >%userprofile%\Desktop\systeminfo.txt  
FINDSTR /L /C:"System Model:" %userprofile%\Desktop\systeminfo.txt 
FINDSTR /L /C:"System Model:" %userprofile%\Desktop\systeminfo.txt >>%log%
FINDSTR /L /C:"OS Name:" %userprofile%\Desktop\systeminfo.txt
FINDSTR /L /C:"OS Name:" %userprofile%\Desktop\systeminfo.txt >>%log%
FINDSTR /L /C:"System Type:" %userprofile%\Desktop\systeminfo.txt
FINDSTR /L /C:"System Type:" %userprofile%\Desktop\systeminfo.txt >>%log%
FINDSTR /L /C:"Total Physical Memory:" %userprofile%\Desktop\systeminfo.txt
FINDSTR /L /C:"Total Physical Memory:" %userprofile%\Desktop\systeminfo.txt >>%log%
FINDSTR /L /C:"Processor(s):" %userprofile%\Desktop\systeminfo.txt
FINDSTR /L /C:"Processor(s):" %userprofile%\Desktop\systeminfo.txt >>%log%
FINDSTR /L /C:"Network Card(s):" %userprofile%\Desktop\systeminfo.txt
FINDSTR /L /C:"Network Card(s):" %userprofile%\Desktop\systeminfo.txt >>%log%
FINDSTR /L /C:"Domain:" %userprofile%\Desktop\systeminfo.txt
wmic cpu get NumberOfCores >>%log%
wmic cpu get NumberOfCores
Pause
wmic cpu get NumberOfCores >>%log%
@ECHO oFF
color B
@ECHO on
set name=%computername:~0,3%
echo Name=%name%
wmic logicaldisk get size,caption
wmic logicaldisk get size,caption >>%log%
Pause
sc config "mpssvc" start= auto
net start mpssvc
Netsh advfirewall set allprofiles state off
Pause
Set Drivename=
@Echo OFF
Set /p Drivename=Please enter the secondary drive letter in Alphabet name D or E:
@Echo On
wmic.exe pagefileset create name="C:\pagefile.sys"
wmic.exe pagefileset where name="C:\\pagefile.sys" set InitialSize=1024,MaximumSize=1024
wmic.exe pagefileset create name="%Drivename%:\pagefile.sys"
wmic.exe pagefileset where name="%Drivename%:\\pagefile.sys" set InitialSize=8192,MaximumSize=8192
Pause
msg "%username%" Please Verify the pagefile Configuration
wmic pagefile >>%log%
systempropertiesadvanced
Pause
@ECHO off
wmic pagefile

FINDSTR /L /C:"Domain:" %userprofile%\Desktop\systeminfo.txt
FINDSTR /L /C:"Domain:" %userprofile%\Desktop\systeminfo.txt >>%log%
Pause
Iisreset /status
pause
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\InetStp /v PathWWWRoot
@Echo off
color B
ipconfig /all | find "IPv4 Address"  >>%log%
ipconfig /all | find "IPv4 Address" 
ipconfig /all | find "Default Gateway " >>%log%
ipconfig /all | find "Default Gateway "
ipconfig /all | find "Subnet Mask" >>%log%
ipconfig /all | find "Subnet Mask"
gpresult /z | find "%computername%"
Pause
@Echo off
msg "%username%" Please uncheck the IPV6 manually and perform the network binding
Pause
Ncpa.cpl
Pause
Echo Current DNS IP add >>%log%
netsh interface ip show address
netsh interface ipv4 show dnsservers
netsh interface ipv4 show dnsservers >>%log%
nslookup %computername%
Pause
@ECHO off
color F
set STYPE=
FOR /F "tokens=3 delims=- " %%i IN ('reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion" /V CurrentVersion') DO set STYPE=%%i

echo System Type:%STYPE%


for /f "delims=[] tokens=2" %%a in ('ping %computername% -n 1 ^| findstr "["') do set thisip=%%a
set thisip=%thisip:~0,3%
echo %thisIP%
IF /I "%thisip%" == "172" ( GOTO :COFDR ) ELSE ( GOTO :COFRD )

:COFRD
@Echo OFF
set SDOMAIN=

FOR /F "tokens=3 delims=- " %%i IN ('reg query "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters" /V Domain') DO set SDOMAIN=%%i
echo System Domain:%SDOMAIN%


IF /I "%sdomain%" == "cof.ds.capitalone.com" GOTO COFDNS
IF /I "%sdomain%" == "dqa.capitalone.com" GOTO DQADNS
IF /I "%sdomain%" == "atm.capitalone.com" GOTO ATMDNS

goto nodomain
:COFDNS
echo COFDNS
set name=%computername:~0,3%
echo Name=%name%
IF "%Name%" == "KDC" GOTO KDC
IF "%Name%" == "PDC" GOTO PDC
:KDC
echo KDC
Color B
@Echo On
netsh interface ipv4 SHOW ipaddresses
set Lanselection=
set /p Lanselection=Enter DATA NIC card name which you want to assign DNS:
Color
netsh interface ipv4 set dnsserver name="%Lanselection%" static 10.4.19.102 register=primary
Netsh interface ipv4 add dns "%Lanselection%" 10.4.19.105 index=2
Netsh interface ipv4 add dns "%Lanselection%" 10.69.100.149 index=3
Netsh interface ipv4 add dns "%Lanselection%" 10.69.100.150 index=4
Ipconfig /registerdns
Nslookup %computername%
GoTO Next
:PDC
echo PDC
Color C
netsh interface ipv4 SHOW ipaddresses
set Lanselection=
set /p Lanselection=Enter DATA NIC card name which you want to assign DNS:
Color
netsh interface ipv4 set dnsserver name="%Lanselection%" static 10.69.100.149 register=primary
Netsh interface ipv4 add dns "%Lanselection%" 10.69.100.150 index=2
Netsh interface ipv4 add dns "%Lanselection%" 10.4.19.102 index=3
Netsh interface ipv4 add dns "%Lanselection%" 10.4.19.105 index=4
ipconfig/registerdns
Nslookup %computername%
GoTO Next

:DQADNS
Color C
Echo DQADNS
netsh interface ipv4 SHOW ipaddresses
set Lanselection=
set /p Lanselection=Enter DATA NIC card name which you want to assign DNS:
Color
netsh interface ipv4 set dnsserver name="%Lanselection%" static 10.8.145.95 register=none
Netsh interface ipv4 add dns "%Lanselection%" 10.69.193.15 index=2
GoTO Next

:ATMDNS
Color C
Echo DQADNS
netsh interface ipv4 SHOW ipaddresses
set Lanselection=
set /p Lanselection=Enter DATA NIC card name which you want to assign DNS:
Color
netsh interface ipv4 set dnsserver name="%Lanselection%" static 10.41.167.30 register=none
Netsh interface ipv4 add dns "%Lanselection%" 10.69.54.30 index=2
GoTO Next


:COFDR
Color C
netsh interface ipv4 SHOW ipaddresses
set Lanselection=
set /p Lanselection=Enter DATA NIC card name which you want to assign DNS:
Color
netsh interface ipv4 set dnsserver name="%Lanselection%" static 172.23.100.71 register=primary
Netsh interface ipv4 add dns "%Lanselection%" 172.23.101.91 index=2

:nodomain
msg "%username%" Server is not DQA/COF/ATM doamin please check DNS config 

:Next

Pause
@Echo OFf
Echo Assigned DNS >>%log%
netsh interface ipv4 show dnsservers >>%log%
Pause
@Echo On
netsh interface ipv4 show dnsservers
msg "%username%" Please compare the DNS list in the document
Pause
ipconfig /flushdns
Pause
@ECHO off
FOR /F "tokens=3 delims=- " %%i IN ('reg query "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters" /V Domain') DO set GDOMAIN=%%i
echo System Domain:%GDOMAIN%


IF /I "%Gdomain%" == "cof.ds.capitalone.com" GOTO COFGroup
IF /I "%Gdomain%" == "dqa.capitalone.com" GOTO DQAGroup
IF /I "%Gdomain%" == "atm.capitalone.com" GOTO ATMGroup

goto Gnodomain

:COFGroup
Powershell -command "& { ([adsi]'WinNT://./Administrators,group').Add('WinNT://cof/Domain Admins,group'); }"
Powershell -command "& { ([adsi]'WinNT://./Administrators,group').Add('WinNT://cof/GR GG COF ADM Local Administrators,group'); }"
Powershell -command "& { ([adsi]'WinNT://./Administrators,group').Add('WinNT://cof/GR GG COF ADM Windows 2000 and AD Support,group'); }"
Powershell -command "& { ([adsi]'WinNT://./Administrators,group').Add('WinNT://cof/GR GG COF USR %computername% Admins,group'); }"
Goto GNEXT
:DQAGroup
Powershell -command "& { ([adsi]'WinNT://./Administrators,group').Add('WinNT://cof/GR GG COF ADM Local Administrators,group'); }"
Powershell -command "& { ([adsi]'WinNT://./Administrators,group').Add('WinNT://cof/GR GG COF ADM Windows 2000 and AD Support,group'); }"
Powershell -command "& { ([adsi]'WinNT://./Administrators,group').Add('WinNT://cof/GR GG COF USR %computername% Admins,group'); }"
Powershell -command "& { ([adsi]'WinNT://./Administrators,group').Add('WinNT://DQA/Domain Admins,group'); }"
Powershell -command "& { ([adsi]'WinNT://./Administrators,group').Add('WinNT://DQA/GR DLG DQA ADM COF Local Administrators,group'); }"
Powershell -command "& { ([adsi]'WinNT://./Administrators,group').Add('WinNT://DQA/GR DLG DQA USR COF %computername% Admins,group'); }"
Goto GNEXT
:ATMGroup
Powershell -command "& { ([adsi]'WinNT://./Administrators,group').Add('WinNT://ATM/Domain Admins,group'); }"
Powershell -command "& { ([adsi]'WinNT://./Administrators,group').Add('WinNT://ATM/GR GG ATM ADM Server Local Administrators,group'); }"
Powershell -command "& { ([adsi]'WinNT://./Administrators,group').Add('WinNT://ATM/GR GG ATM ADM Windows 2008 and AD Support,group'); }"
Powershell -command "& { ([adsi]'WinNT://./Administrators,group').Add('WinNT://ATM/GR GG ATM USR %computername% Admins,group'); }"
Goto GNEXT
:Gnext
net localgroup administrators >>%log%
net localgroup administrators
:Gnodomain
msg "%username%" Verify the Appropriate Groups are available
Pause
net user lanadmin Cyber@rk
msg "%username%" Lanadmin Password reset Successfully
Pause
msg "%username%" Please uncheck the password never expire for Lanadmin 
Compmgmt.msc
pause
gpedit.msc
pause
slmgr.vbs /dlv
pause

IF /i "%stype%" == "6.1" GOTO R2
IF /i "%stype%" == "6.0" GOTO ENT
goto notype
Pause
:R2
Echo off
Tasklist | find "enstart" >>%log%
Tasklist | find "enstart"
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{421F3D82-B781-4221-8528-794FE8813CE4} /v DisplayIcon
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{421F3D82-B781-4221-8528-794FE8813CE4} /v DisplayIcon >>%log%
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{421F3D82-B781-4221-8528-794FE8813CE4} /V InstallDate >>%log%
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{421F3D82-B781-4221-8528-794FE8813CE4} /V InstallDate
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{D9ADF11F-7A67-4E70-BD89-F29DE876C982} /V DisplayName
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{D9ADF11F-7A67-4E70-BD89-F29DE876C982} /V DisplayName >>%log%
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{132F7D38-FA45-11D5-BDC3-00104B938A09} /V DisplayName
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{132F7D38-FA45-11D5-BDC3-00104B938A09} /V DisplayName >>%log%
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{1FDB8EC6-BAF1-42F9-8E09-4D9AB369F1B5} /V DisplayName
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{1FDB8EC6-BAF1-42F9-8E09-4D9AB369F1B5} /V DisplayName >>%log%
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{B7643B11-A60E-4A33-A465-263FEB32113A} /V DisplayName
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{B7643B11-A60E-4A33-A465-263FEB32113A} /V DisplayName >>%log%
REG QUERY "HKLM\SOFTWARE\Microsoft\SMS\Mobile Client" /v ProductVersion
REG QUERY "HKLM\SOFTWARE\Microsoft\SMS\Mobile Client" /v ProductVersion >>%log%
sc query ccmexec | find /i "SERVICE_NAME:"
sc query ccmexec | find /i "SERVICE_NAME:" >>%log%
Pause
appwiz.cpl
Pause
Echo on
Goto next1
:ENT
Echo off
Tasklist | find "enstart"
Tasklist | find "enstart" >>%log%
reg Query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{1FDB8EC6-BAF1-42F9-8E09-4D9AB369F1B5} /v DisplayName
reg Query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{1FDB8EC6-BAF1-42F9-8E09-4D9AB369F1B5} /v DisplayName >>%log%
reg Query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{2AA64141-A6A9-439B-BCFF-A02797C0CA4B} /V Installdate
reg Query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{2AA64141-A6A9-439B-BCFF-A02797C0CA4B} /V Installdate >>%log%
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{2AA64141-A6A9-439B-BCFF-A02797C0CA4B} /V Displayicon
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{2AA64141-A6A9-439B-BCFF-A02797C0CA4B} /V Displayicon >>%log%
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{B7643B11-A60E-4A33-A465-263FEB32113A} /V DisplayName 
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{B7643B11-A60E-4A33-A465-263FEB32113A} /V DisplayName >>%log%
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{D9ADF11F-7A67-4E70-BD89-F29DE876C982} /V DisplayName
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{D9ADF11F-7A67-4E70-BD89-F29DE876C982} /V DisplayName >>%log%
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{132F7D38-FA45-11D5-BDC3-00104B938A09} /V DisplayName
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{132F7D38-FA45-11D5-BDC3-00104B938A09} /V DisplayName >>%log%
REG QUERY "HKLM\SOFTWARE\Microsoft\SMS\Mobile Client" /v ProductVersion
REG QUERY "HKLM\SOFTWARE\Microsoft\SMS\Mobile Client" /v ProductVersion >>%log%
sc query ccmexec | find /i "SERVICE_NAME:"
sc query ccmexec | find /i "SERVICE_NAME:" >>%log%
Pause
appwiz.cpl
Pause
Echo on
Goto next1

:notype
msg "%username%" Unable to find the OS type please check the installed Application's manually
:next1
@Echo OFF
set SMAN=

FOR /F "tokens=3 delims= " %%i IN ('reg query "HKEY_LOCAL_MACHINE\HARDWARE\DESCRIPTION\System\BIOS" /v SystemManufacturer') DO set SMAN=%%i

echo System Type:%SMAN%

IF /I "%SMAN%" == "VMware," ( GOTO :EXIT ) ELSE ( GOTO :PHY )
@Echo on
:PHY
reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\EMC Corporation\EMC Control Center\6.1" /V MA_ROOT
reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\EMC Corporation\EMC Control Center\6.1" /V MA_ROOT >>%log%
reg Query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{33BEF2F0-A4E2-41EE-82F8-2480BE282078} /V DisplayName
reg Query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{33BEF2F0-A4E2-41EE-82F8-2480BE282078} /V DisplayName >>%log%
reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Hewlett-Packard\System Management Homepage" /V Version
reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Hewlett-Packard\System Management Homepage" /V Version >>%log%
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{FE9DF47D-5CAE-4C5D-B652-09EA8F3D0C9A} /V DisplayName
reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{FE9DF47D-5CAE-4C5D-B652-09EA8F3D0C9A} /V DisplayName >>%log%
Pause
appwiz.cpl
:Exit
Pause
msg "%username%" PP completed for server %computername% . Please Restart the Server
net use X: \\10.60.8.98\Applications /p:no
X:\CommVault\Script\CVPing.bat %Name%
--------------LUN ID---------------------
Get-Disk | select @{l = "LUNID";e={$_.uniqueid.substring(28,4)}},manufacturer,@{l="Size";e={($_.size/1gb) -as [int]}}
-----------------------------------------
-------Enstart Installation----
cd\
cd c:
md temp
copy \\10.60.8.98\Applications\EnCase\setup.msi c:\temp
CD C:\Temp
msiexec /i "setup.msi" /qb- /l*v "%WINDIR%\INSTALLER\encasesafe6.log"
Tasklist | find "enstart"

---------------------- Tripwire Installation--------------

Hostname
net use T: \\10.60.8.98\Applications
copy \\10.60.8.98\Applications\TripWire\TWEAInstall\ C:\windows\temp
net delete t:
cd\
cd c:\windows\temp
Pause

---------------------- Tripwire Installation--------------
@echo off  
HOsTName
:Confirm
set /p confirmDeploy=Confirm the server KDC or PDC [KDC/PDC] ?:
if /i "%confirmDeploy%"=="KDC" goto KDC
if /i "%confirmDeploy%"=="PDC" goto PDC
goto Confirm

:PDC
TWEAgentInstall_PDC.bat
Goto end

:KDC
TWEAgentInstall_KDC.bat
Goto end
---------------------- Tripwire Installation--------------

find /i "Product: " %windir%\temp\TripWireEAgent_msi.log
Pause
ECHO off
HOstname
findstr /i "tw.server.host" "%programfiles%\Tripwire\TE\Agent\data\config\agent.properties"
findstr /i "tw.server.port" "%programfiles%\Tripwire\TE\Agent\data\config\agent.properties" 
findstr /i "tw.agent.generator.port" "%programfiles%\Tripwire\TE\Agent\data\config\agent.properties"
findstr /i "java.rmi.server.hostname" "%programfiles%\Tripwire\TE\Agent\data\config\agent.properties"
findstr /i "tw.rpc.interfaceAddr" "%programfiles%\Tripwire\TE\Agent\data\config\agent.properties"
ECho on
pause
notepad c:\Program Files\Tripwire\TE\Agent\data\config\agent.properties
net start "Tripwire Enterprise Agent"
net stop "Tripwire Detection Service"
net start "Tripwire Detection Service"
SC query tesvc | find "STATE"
SC query teagent | find "STATE"
Pause

---------- Tripwire Installation -----
Cd\
cd %windir%\temp
copy \\10.60.8.98\Applications\TripWire\TripWireEAgent-v3.exe %windir%\temp\
TripWireEAgent-v3.exe




----------------- DNS Registration UnCheck-------------

$nics=Get-WmiObject win32_networkadapterconfiguration 
Foreach ($NIC in $NICs){
$NIC.SetDynamicDNSRegistration($FALSE)
}
------ Restart the service -------------

$computers = Get-Content c:\temp\servers.txt
$a = $null
$a = @()
foreach ($computer in $computers)
{
   if (test-connection -computername $computer -count 1 -quiet) 
    {

set-Service -Name enstart64 -status Running -computername $computer
$a += $(Get-WmiObject Win32_Service -computername $computer |Where-Object {$_.name -like '*enstart*'})
}
Else
{

        $a += "$computer not online"
    }
       Write-Host $computer
}

$a |Format-list __server,Name,Startmode,State



$var = get-content c:\temp\servers.txt
$network = @()
foreach ($computer in $var) 
{
    if (test-connection -computername $computer -count 1 -quiet) 
    {
        
       $network += get-service -name enstart64 -computername $computer -EA silentlyContinue 

          }
     
    else 
    { 
        
        $network += "$computer not online"
    }
       Write-Host $computer
}
$network |Format-table MachineName,Name, status –AutoSize

------- Backup Nic Information ---- 

$var = get-content ".\servers.txt"
$network = @()
foreach ($computer in $var) 
{
    if (test-connection -computername $computer -count 1 -quiet) 
    {
        Write-Host "Found $computer"
       Try { 
        $NICInfo = Get-WmiObject win32_networkadapterconfiguration -computername $computer |where {$_.ipenabled -eq $true -and $_.defaultipgateway -eq $null }  -EA silentlyContinue 
        If (($NICInfo -ne "") -and ($NICInfo -ne $null)) {
        $network += $NICInfo
        Write-Host "$computer - Retrieved NIC info"
        }else{
        $network += "$computer - no backup NICs"
        Write-Host "$computer - no backup NICs"
        }
       }
       Catch {
        Write-Host "$Computer - Error can't retrieve NIC Info"
        }

          }
     
    else 
    { #this is for test-connection if statement
        
        $network += "$computer not online"
    }
       Write-Host $computer
}
$network |Format-table __Server,Description,IPAddress,IPSubnet,DefaultIPgateway -AutoSize


------ Disk Space --------------
$computers = Get-Content c:\temp\servers.txt
$a = $null
$a = @()
foreach ($computer in $computers)
{
   if (test-connection -computername $computer -count 1 -quiet) 
    
{

$a += (get-wmiobject Win32_Logicaldisk -computername $computer |Where-Object {$_.DriveType -eq "3"})
}
Else
{

        $a += "$computer not online"
    }
       Write-Host $computer
}

$a |Format-table __server,DeviceID,Size,freespace






--------2008 password reset-----
Choose option "Repair your computer" 

 Start command prompt 
 C:\ 
 CD C:\Windows\System32 
 MOVE Utilman.exe Utilman.exe.bak
 COPY Cmd.exe Utilman.exe 
 You may also need to "Enable" the administrator account which can be done by using "NET USER administrator /active:yes" 
 Restart windows 
 At the login screen, type Windows-U, this fires up cmd.exe now 
 NET USER administrator Presto! Login as administrator! 
 Now repair computer again and move the original Utilman.exe back
 
-------2008 password reset-----

EMC Grab : Location \\10.60.8.98\Applications\EMC
wmic partition get BlockSize, StartingOffset, Name, Index 


=========================================

Wmic /Node:KDCPCOFCTX30.cof.ds.capitalone.com LogicalDisk Where DriveType="3" Get DeviceID,FileSystem,FreeSpace,Size 
Wmic /Node:KDCPCOFCTX30.cof.ds.capitalone.com cpu list brief

/node:@serverlist.txt 

>/node:@D:\server.txt 

wmic /node:@c:\work\mycomputers.txt 
wmic /node:@c:\server.txt /output:c:\os.csv cpu list brief
Wmic >/node:@D:\server.txt /output:c:\USERS\3
49536\DESKTOP\os.csv cpu list brief

wmic /node:@c:\server.txt /Output:"C:\ProcessorReport.txt" cpu get Systemname,Name,Description,Manufacturer /format:list

C:\Users\349536>Wmic /node:@c:\kc\server.txt /output:c:\DESKTOP\os.txt cpu list brief

wmic /node:@c:\server.txt /Output:"C:\ProcessorReport.txt" LogicalDisk Where DriveType="3" Get DeviceID,FileSystem,FreeSpace,Size 

----wmic /node:@c:\server.txt /Output:"C:\ProcessorReport.txt" nicconfig get dnsserversearchorder
----wmic /node:@c:\server.txt /Output:"C:\ProcessorReport.txt" nicconfig get wINSsecondaryServer,winsprimaryserver
----wmic /node:@c:\server.txt /Output:"C:\ProcessorReport.txt" LogicalDisk Where DriveType="3" Get DeviceID,FileSystem,FreeSpace,Size
----wmic /node:@c:\server.txt /Output:"C:\ProcessorReport.txt" cpu list brief /format:list
----wmic /node:@c:\server.txt /Output:"C:\ProcessorReport.txt" ComputerSystem get TotalPhysicalMemory

Remote logon Currently disabled psexec.exe “\\SERVERNAME\ change logon /enable”
wmic /node:10.42.131.191 product get Description,version

wmic /node:@c:\temp\server.txt /Output:"C:\temp\server.txt" product get Description,version

wmic /node:@c:\temp\servers.txt /Output:"c:\ashok\report.html" product get Description,version & wmic computersystem get dnshostname /format:hform



PLAID Migration 


$erroractionpreference = “SilentlyContinue” 
$a = New-Object -comobject Excel.Application 
$a.visible = $True

$b = $a.Workbooks.Add() 
$c = $b.Worksheets.Item(1)

$c.Cells.Item(1,1) = “Machine Name” 
$c.Cells.Item(1,2) = “Drive” 
$c.Cells.Item(1,3) = “Total size (GB)” 
$c.Cells.Item(1,4) = “Free Space (GB)” 
$c.Cells.Item(1,5) = “Free Space (%)” 
$c.cells.item(1,6) = "Name "

$d = $c.UsedRange 
$d.Interior.ColorIndex = 19 
$d.Font.ColorIndex = 11 
$d.Font.Bold = $True 
$d.EntireColumn.AutoFit()

$intRow = 2

$colComputers = get-content "C:\Server.txt"
foreach ($strComputer in $colComputers) 
{ 
$colDisks = get-wmiobject Win32_LogicalDisk -computername $strComputer -Filter “DriveType = 3"
foreach ($objdisk in $colDisks) 
{ 
$c.Cells.Item($intRow, 1) = $strComputer.ToUpper() 
$c.Cells.Item($intRow, 2) = $objDisk.DeviceID 
$c.Cells.Item($intRow, 3) = “{0:N0}” -f ($objDisk.Size/1GB) 
$c.Cells.Item($intRow, 4) = “{0:N0}” -f ($objDisk.FreeSpace/1GB) 
$c.Cells.Item($intRow, 5) = “{0:P0}” -f ([double]$objDisk.FreeSpace/[double]$objDisk.Size) 
$c.cells.item($introw, 6) = $objdisk.volumename

$intRow = $intRow + 1 
} 
}
$d.EntireColumn.AutoFit()
cls



---- Get-WmiObject Win32_ComputerSystem -ComputerName (Get-Content D:\1\as.txt) |  Select-Object Name,TotalPhysicalMemory
---- Get-WmiObject Win32_ComputerSystem -ComputerName (Get-Content D:\1\as.txt) |  Select-Object Name,NumberOfProcessors
---- Get-WmiObject Win32_NetworkAdapterConfiguration,Win32_ComputerSystem -ComputerName (Get-Content D:\1\as.txt) | Select-Object Name,IPAddress
---- Get-WmiObject Win32_NetworkAdapterConfiguration -Namespace “root\CIMV2? -ComputerName (Get-Content D:\1\as.txt) | where{$_.IPEnabled -eq “True”} 

---- Get-WmiObject Win32_NetworkAdapterConfiguration -ComputerName (Get-Content D:\1\as.txt) | Where-Object {$_.IPAddress -ne $null} | Select-Object IPAddress


---- get-wmiobject win32_networkadapterconfiguration -ComputerName (Get-Content D:\1\as.txt) -filter "IPEnabled='True'" | Select-Object {$_.MACAddress},{$_.IPAddress},{$_.ipsubnet},{$_.DefaultIPGateway},{$_.DNSHostname} | Export-Csv D:\1\as.csv –NoTypeInformation

---------------Empty Folders-----------

On Error Resume Next

Set FSO = CreateObject("Scripting.FileSystemObject")
ShowSubFolders FSO.GetFolder("C:\")

Sub ShowSubFolders(Folder)
    For Each Subfolder in Folder.SubFolders
        If Subfolder.Size = 0 Then
            Wscript.Echo Subfolder.Path
        End If
        ShowSubFolders Subfolder
    Next
End Sub
-------------------------------

PS Z:\> dir -recurse | Where-Object { $_.PSIsContainer } |   Where-Object { $_.GetFiles().Count -eq 0 } |   Where-Object { $_.GetDirectories().Count -eq 0 } | ForEach-Object { $_.FullName } >empty.txt

Directory listing 
dir /b /ad /s


---------------

$computers= get-content C:\Users\TEMP.CNAW2K\Documents\servers.txt
$a=$null
$a=@()
foreach ($computer in $Computers)
{

$a += Get-ADComputer -Identity $computer -Properties operatingsystem |Select-Object name,DistinguishedName,operatingsystem
{
$a+="$computer not online"
}
Write-host $computer
}
$a |format-table name,DistinguishedName,operatingsystem
----------------


$erroractionpreference = "SilentlyContinue" 
$a = New-Object -comobject Excel.Application 
$a.visible = $True  
 
$b = $a.Workbooks.Add() 
$c = $b.Worksheets.Item(1) 
 
$c.Cells.Item(1,1) = "Server Name" 
$c.Cells.Item(1,2) = "Domain" 
$c.Cells.Item(1,3) = "Model" 
 
$d = $c.UsedRange 
$d.Interior.ColorIndex = 19 
$d.Font.ColorIndex = 11 
$d.Font.Bold = $True 
 
$intRow = 2 
 

{ 
$colDisks = Get-ADUser -SearchBase 'DC=cna,DC=com' -filter * -Properties sAMAccountType,mail,Enabled,DisplayName
foreach ($objdisk in $colDisks) 
{ 
$c.Cells.Item($intRow, 1) = $objdisk.sAMAccountType 
$c.Cells.Item($intRow, 2) = $objDisk.mail
$c.Cells.Item($intRow, 3) = $objDisk.Enabled
$c.Cells.Item($intRow, 4) = $objDisk.DisplayName
$intRow = $intRow + 1 
} 
}
--------------------------

$computers= get-content c:\temp\servers.txt
$a=$null
$a=@()
foreach ($computer in $Computers)
{
if (test-connection -computername $computer -count 1 -quiet)
{
$a += get-wmiobject win32_computersystem -computername $computer |select-object __Server,Manufacturer,Domain
}
else
{
$a+="$computer not online"
}
Write-host $computer
}
$a |format-table  __server,Manufacturer,domain

----------------

$erroractionpreference = "SilentlyContinue" 
$a = New-Object -comobject Excel.Application 
$a.visible = $True  
 
$b = $a.Workbooks.Add() 
$c = $b.Worksheets.Item(1) 
 
$c.Cells.Item(1,1) = "Server Name" 
$c.Cells.Item(1,2) = "BuildNumber"
$c.Cells.Item(1,3) = "SerialNumber"
$c.Cells.Item(1,4) = "Releasedate"
$c.Cells.Item(1,5) = "Status"
$c.Cells.Item(1,6) = "SMBIOSBIOSVersion"
$c.Cells.Item(1,7) = "Installed Date"
$c.Cells.Item(1,8) = "Model"
 
$d = $c.UsedRange 
$d.Interior.ColorIndex = 19 
$d.Font.ColorIndex = 11 
$d.Font.Bold = $True 
 
$intRow = 2 
 
$colComputers = get-content c:\temp\servers.txt 
foreach ($strComputer in $colComputers) 
{ 
$colDisks = Get-WmiObject -class win32_bios -computername $strComputer
$OS = Get-WmiObject -Class Win32_OperatingSystem -computername $strComputer
$colDisks1 = $OS.ConvertToDateTime($OS.InstallDate)
$BIOS = Get-WmiObject -Class Win32_OperatingSystem -computername $strComputer
$colDisks3 = $BIOS.ConvertToDateTime($BIOS.ReleaseDate)
$colDisks2 = get-wmiobject win32_Computersystem -computername $strComputer
foreach ($objdisk in $colDisks) 
{ 
$c.Cells.Item($intRow, 1) = $strComputer.ToUpper() 
$c.Cells.Item($intRow, 2) = $objDisk.BuildNumber
$c.Cells.Item($intRow, 3) = $objDisk.SerialNumber
$c.Cells.Item($intRow, 4) = $objDisk3
$c.Cells.Item($intRow, 5) = $objDisk.Status
$c.Cells.Item($intRow, 6) = $objDisk.SMBIOSBIOSVersion
$c.Cells.Item($intRow, 7) = $colDisks1
$c.Cells.Item($intRow, 8) = $colDisks2.Model
$intRow = $intRow + 1 
} 
}
-------------------------------------
$erroractionpreference = "SilentlyContinue" 
$a = New-Object -comobject Excel.Application 
$a.visible = $True  
 
$b = $a.Workbooks.Add() 
$c = $b.Worksheets.Item(1) 
 
$c.Cells.Item(1,1) = "Server Name" 
$c.Cells.Item(1,2) = "Drive" 
$c.Cells.Item(1,3) = "Total Size (GB)" 
$c.Cells.Item(1,4) = "Free Space (GB)" 
$c.Cells.Item(1,5) = "Free Space (%)" 
 
$d = $c.UsedRange 
$d.Interior.ColorIndex = 19 
$d.Font.ColorIndex = 11 
$d.Font.Bold = $True 
 
$intRow = 2 
 
$colComputers = get-content C:\script\servers.txt
foreach ($strComputer in $colComputers) 
{ 
$colDisks = get-wmiobject Win32_LogicalDisk -computername $strComputer -Filter "DriveType = 3"  
foreach ($objdisk in $colDisks) 
{ 
$c.Cells.Item($intRow, 1) = $strComputer.ToUpper() 
$c.Cells.Item($intRow, 2) = $objDisk.DeviceID 
$c.Cells.Item($intRow, 3) = "{0:N0}" -f ($objDisk.Size/1GB) 
$c.Cells.Item($intRow, 4) = "{0:N0}" -f ($objDisk.FreeSpace/1GB) 
$c.Cells.Item($intRow, 5) = "{0:P0}" -f ([double]$objDisk.FreeSpace/[double]$objDisk.Size) 
$intRow = $intRow + 1 
} 
}
------


$computers= get-content c:\script\servers.txt
$a=$null
$a=@()
foreach ($computer in $Computers)
{
if (test-connection -computername $computer -count 1 -quiet)
{
$a += get-wmiobject win32_Computersystem -computername $computer |Select-Object Name,Domain
}
else
{
$a+="$computer not online"
}
Write-host $computer
}
$a |format-table Name,Domain -AutoSize
----
$erroractionpreference = "SilentlyContinue" 
$a = New-Object -comobject Excel.Application 
$a.visible = $True  
 
$b = $a.Workbooks.Add() 
$c = $b.Worksheets.Item(1) 
 
$c.Cells.Item(1,1) = "Server Name" 
$c.Cells.Item(1,2) = "Drive" 
$c.Cells.Item(1,3) = "Total Size (GB)" 
$c.Cells.Item(1,4) = "Free Space (GB)" 

 
$d = $c.UsedRange 
$d.Interior.ColorIndex = 19 
$d.Font.ColorIndex = 11 
$d.Font.Bold = $True 
 
$intRow = 2 
 
$colComputers = get-content c:\temp\servers.txt 
foreach ($strComputer in $colComputers) 
{ 
$colDisks = get-wmiobject win32_service -computername $strcomputer -filter "Name='W3SVC'"
foreach ($objdisk in $colDisks) 
{ 
$c.Cells.Item($intRow, 1) = $strComputer.ToUpper() 
$c.Cells.Item($intRow, 2) = $objDisk.Name 
$c.Cells.Item($intRow, 3) = "{0:N0}" -f ($objDisk.DisplayName) 
$c.Cells.Item($intRow, 4) = "{0:N0}" -f ($objDisk.State) 
$intRow = $intRow + 1 
} 
}------------------
$computers= get-content c:\temp\servers.txt
$a=$null
$a=@()
foreach ($computer in $Computers)
{
if (test-connection -computername $computer -count 1 -quiet)
{
$a += Get-WmiObject -Class Win32_Product -ComputerName $computer |select-object __server,name,version 
}
else
{
$a+="$computer not online"
}
Write-host $computer
}
$a |format-table -autosize __server,name,version
-------------

$erroractionpreference = "SilentlyContinue" 
$a = New-Object -comobject Excel.Application 
$a.visible = $True  
 
$b = $a.Workbooks.Add() 
$c = $b.Worksheets.Item(1) 
 
$c.Cells.Item(1,1) = "Server Name" 
$c.Cells.Item(1,2) = "Name" 
$c.Cells.Item(1,3) = "Description" 
$c.Cells.Item(1,4) = "Enabled"
 
$d = $c.UsedRange 
$d.Interior.ColorIndex = 19 
$d.Font.ColorIndex = 11 
$d.Font.Bold = $True 
 
$intRow = 2 
 
$colComputers = get-content c:\script\servers.txt 
foreach ($strComputer in $colComputers) 
{ 
$colDisks = Get-WmiObject -ComputerName $strComputer Win32_UserAccount -Filter  "LocalAccount='True'" 
foreach ($objdisk in $colDisks) 
{ 
$c.Cells.Item($intRow, 1) = $strComputer.ToUpper() 
$c.Cells.Item($intRow, 2) = $objDisk.Name
$c.Cells.Item($intRow, 3) = $objDisk.Description
$c.Cells.Item($intRow, 4) = $objDisk.Disabled
$intRow = $intRow + 1 
} 
}
--------------------

$computers= get-content c:\script\servers.txt
$a=$null
$a=@()
foreach ($computer in $Computers)
{
if (test-connection -computername $computer -count 1 -quiet)
{
$a += get-wmiobject win32_operatingsystem -computername $computer |Select-Object __Server,Caption
}
else
{
$a+="$computer not online"
}
Write-host $computer
}
$a |format-table  __Server,Caption -AutoSize

------------------
$computers= get-content c:\script\servers.txt
$a=$null
$a=@()
foreach ($computer in $Computers)
{
if (test-connection -computername $computer -count 1 -quiet)
{
$a += Test-Connection -computer $computer -Count 1 |Select-Object Address,IPV4Address,ResponseTimeToLive
}
else
{
$a+="$computer not online"
}
Write-host $computer
}
$a |format-table Address,IPV4Address,ResponseTimeToLive

-------

# Define every server IP you need to test:
$Servers= get-content c:\temp\servers.txt

# Define the port number you need to test (eg: 3389 for RDP):
$portToCheck = '1688'

foreach ($server in $servers) {

    If ( Test-Connection $server -Count 1 -Quiet) {
    
        try {       
            $null = New-Object System.Net.Sockets.TCPClient -ArgumentList $server,$portToCheck
            $props = @{
                Server = $server
                PortOpen = 'Yes'
            }
        }

        catch {
            $props = @{
                Server = $server
                PortOpen = 'No'
            }
        }
    }

    Else {
        
        $props = @{
            Server = $server
            PortOpen = 'Server did not respond to ping'
        }
    }

    New-Object PsObject -Property $props

} 

------------------

$strMachineName = import-csv .\computer_name.csv
foreach ($line in $strMachineName)
{
    try {
        $reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $line.computer)
        $regkey = $reg.OpenSubkey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{23CE813D-FE4E-48F2-93B9-A16888251E92}")
        $serialkey = $regkey.GetValue("DisplayName")

        ('"{0}","{1}"' -f $line.computer, $serialkey) | out-file C:\stdout.csv -append -encoding ascii
    } catch {
        ('"{0}","{1}"' -f $line.computer, $_) | out-file C:\stderr.csv -append -encoding ascii
    }
}

---------------------
$computers= get-content c:\temp\servers.txt
$a=$null
$a=@()
foreach ($computer in $Computers)
{
if (test-connection -computername $computer -count 1 -quiet)
{
$a += get-wmiobject win32_service -computername $computer -filter "Name='CcmExec'" |select-object __SERVER,Name,DisplayName,State 
}
else
{
$a+="$computer not online"
}
Write-host $computer
}
$a |format-table __SERVER,Name,DisplayName,State

----------------


$filename = "\Windows\System32\DWRCS.EXE" 
 
$obj = New-Object System.Collections.ArrayList 
 
$computernames = Get-Content C:\script\servers.txt 
foreach ($server in $computernames) 
{ 
$filepath = Test-Path "\\$server\c$\$filename" 
 
if ($filepath -eq "True") { 
$file = Get-Item "\\$server\c$\$filename" 
 
     
        $obj += New-Object psObject -Property @{'Computer'=$server;'FileVersion'=$file.VersionInfo|Select FileVersion;'LastAccessTime'=$file.LastWriteTime} 
        } 
     } 
     
$obj | select computer, FileVersion, lastaccesstime | Export-Csv -Path 'c:\script\version.csv' -NoTypeInformation 


---



$erroractionpreference = "SilentlyContinue" 
$a = New-Object -comobject Excel.Application 
$a.visible = $True  
 
$b = $a.Workbooks.Add() 
$c = $b.Worksheets.Item(1) 
 
$c.Cells.Item(1,1) = "Server Name" 
$c.Cells.Item(1,2) = "Domain" 
$c.Cells.Item(1,3) = "Model" 
 
$d = $c.UsedRange 
$d.Interior.ColorIndex = 19 
$d.Font.ColorIndex = 11 
$d.Font.Bold = $True 
 
$intRow = 2 
 
$colComputers = get-content c:\temp\servers.txt 
foreach ($strComputer in $colComputers) 
{ 
$colDisks = get-wmiobject win32_Computersystem -computername $strComputer
foreach ($objdisk in $colDisks) 
{ 
$c.Cells.Item($intRow, 1) = $strComputer.ToUpper() 
$c.Cells.Item($intRow, 2) = $objDisk.Domain
$c.Cells.Item($intRow, 3) = $objDisk.Model
$intRow = $intRow + 1 
} 
}


-------

$erroractionpreference = "SilentlyContinue" 
$a = New-Object -comobject Excel.Application 
$a.visible = $True  
 
$b = $a.Workbooks.Add() 
$c = $b.Worksheets.Item(1) 
 
$c.Cells.Item(1,1) = "Server Name" 
$c.Cells.Item(1,2) = "BuildNumber"
$c.Cells.Item(1,3) = "SerialNumber"
$c.Cells.Item(1,4) = "Releasedate"
$c.Cells.Item(1,5) = "Status"
$c.Cells.Item(1,6) = "SMBIOSBIOSVersion"
$c.Cells.Item(1,7) = "Installed Date"
$c.Cells.Item(1,8) = "Model"
 
$d = $c.UsedRange 
$d.Interior.ColorIndex = 19 
$d.Font.ColorIndex = 11 
$d.Font.Bold = $True 
 
$intRow = 2 
 
$colComputers = get-content c:\script\servers.txt 
foreach ($strComputer in $colComputers) 
{ 
$colDisks = Get-WmiObject -class win32_bios -computername $strComputer
$RELDATE = $colDisks.ConvertToDateTime($colDisks.Releasedate)
$colDisks1 = Get-WmiObject Win32_OperatingSystem -computername $strComputer
$INSDATE = $colDisks1.ConvertToDateTime($colDisks1.InstallDate)
$colDisks2 = get-wmiobject win32_Computersystem -computername $strComputer
foreach ($objdisk in $colDisks) 
{ 
$c.Cells.Item($intRow, 1) = $strComputer.ToUpper() 
$c.Cells.Item($intRow, 2) = $objDisk.BuildNumber
$c.Cells.Item($intRow, 3) = $objDisk.SerialNumber
$c.Cells.Item($intRow, 4) = $RELDATE
$c.Cells.Item($intRow, 5) = $objDisk.Status
$c.Cells.Item($intRow, 6) = $objDisk.SMBIOSBIOSVersion
$c.Cells.Item($intRow, 7) = $INSDATE
$c.Cells.Item($intRow, 8) = $colDisks2.Model
$intRow = $intRow + 1 
} 
}


----



On Error Resume Next
Dim fso, ts
strOutput = "local_Status.csv"
Set fso = CreateObject("Scripting.FileSystemObject")
Set objFSO = CreateObject("Scripting.FileSystemObject")
Set input = fso.OpenTextFile("C:\Script\Admin\servers.txt", 1, False)
Set ts = fso.CreateTextFile("Local_Status.csv")
fv = "File Version"
ts.WriteLine """ComputerName"",""GroupName"",""User Name"""

While Not input.AtEndOfStream
      strComputer = input.ReadLine
      Set colGroups = GetObject("WinNT://" & strComputer & "")
colGroups.Filter = Array("group")
For Each objGroup In colGroups
'    Wscript.Echo objGroup.Name 
    For Each objUser in objGroup.Members
'        Wscript.Echo vbTab & objUser.Name
        
        
        ts.WriteLine """" & strComputer & """,""" & objGroup.Name & """,""" & objUser.Name & """"
    Next
Next
      
      
Wend

input.Close
ts.Close
Set ts = Nothing
Set fso = Nothing


MsgBox "Done. Please see " & strOutput

------------------------




###########################Define Variables##################################

$reportpath = "E:\DOnotDelete\ADReport.htm" 

if((test-path $reportpath) -like $false)
{
new-item $reportpath -type file
}
$smtphost = "mailhost.cna.com" 
$from = "ActiveDirectory@cna.com" 
$email1 = "tcsad@cna.com"
$email2 = "Teresa.McCloud@cna.com"
$timeout = "60"

###############################HTml Report Content############################
$report = $reportpath

Clear-Content $report 
Add-Content $report "<html>" 
Add-Content $report "<head>" 
Add-Content $report "<meta http-equiv='Content-Type' content='text/html; charset=iso-8859-1'>" 
Add-Content $report '<title>AD Status Report</title>' 
add-content $report '<STYLE TYPE="text/css">' 
add-content $report  "<!--" 
add-content $report  "td {" 
add-content $report  "font-family: Tahoma;" 
add-content $report  "font-size: 11px;" 
add-content $report  "border-top: 1px solid #999999;" 
add-content $report  "border-right: 1px solid #999999;" 
add-content $report  "border-bottom: 1px solid #999999;" 
add-content $report  "border-left: 1px solid #999999;" 
add-content $report  "padding-top: 0px;" 
add-content $report  "padding-right: 0px;" 
add-content $report  "padding-bottom: 0px;" 
add-content $report  "padding-left: 0px;" 
add-content $report  "}" 
add-content $report  "body {" 
add-content $report  "margin-left: 5px;" 
add-content $report  "margin-top: 5px;" 
add-content $report  "margin-right: 0px;" 
add-content $report  "margin-bottom: 10px;" 
add-content $report  "" 
add-content $report  "table {" 
add-content $report  "border: thin solid #000000;" 
add-content $report  "}" 
add-content $report  "-->" 
add-content $report  "</style>" 
Add-Content $report "</head>" 
Add-Content $report "<body>" 
add-content $report  "<table width='100%'>" 
add-content $report  "<tr bgcolor='Lavender'>" 
add-content $report  "<td colspan='7' height='25' align='center'>" 
add-content $report  "<font face='tahoma' color='#003399' size='4'><strong>Active Directory Health Check</strong></font>" 
add-content $report  "</td>" 
add-content $report  "</tr>" 
add-content $report  "</table>" 
 
add-content $report  "<table width='100%'>" 
Add-Content $report  "<tr bgcolor='IndianRed'>" 
Add-Content $report  "<td width='5%' align='center'><B>Identity</B></td>" 
Add-Content $report  "<td width='10%' align='center'><B>PingSTatus</B></td>" 
Add-Content $report  "<td width='10%' align='center'><B>NetlogonService</B></td>" 
Add-Content $report  "<td width='10%' align='center'><B>NTDSService</B></td>" 
Add-Content $report  "<td width='10%' align='center'><B>NetlogonsTest</B></td>"
Add-Content $report  "<td width='10%' align='center'><B>ReplicationTest</B></td>"
Add-Content $report  "<td width='10%' align='center'><B>AdvertisingTest</B></td>"
Add-Content $report  "<td width='10%' align='center'><B>FSMOCheckTest</B></td>"
 
Add-Content $report "</tr>" 

#####################################Get ALL DC Servers#################################

#$getForest = [system.directoryservices.activedirectory.Forest]::GetCurrentForest()

$getForest = Get-ADDomainController -Filter * -Server cna.com
$DCServers = $getForest | ForEach-Object {$_.hostname}

#$DCServers = $getForest.domains | ForEach-Object {$_.hostname} | ForEach-Object {$_.Name} 



################Ping Test######

foreach ($DC in $DCServers){
$Identity = $DC
                Add-Content $report "<tr>"
if ( Test-Connection -ComputerName $DC -Count 1 -ErrorAction SilentlyContinue ) {
Write-Host $DC `t $DC `t Ping Success -ForegroundColor Green
 
		Add-Content $report "<td bgcolor= 'GainsBoro' align=center>  <B> $Identity</B></td>" 
                Add-Content $report "<td bgcolor= 'Aquamarine' align=center>  <B>Success</B></td>" 

                ##############Netlogon Service Status################
		$serviceStatus = start-job -scriptblock {get-service -ComputerName $($args[0]) -Name "Netlogon" -ErrorAction SilentlyContinue} -ArgumentList $DC
                wait-job $serviceStatus -timeout $timeout
                if($serviceStatus.state -like "Running")
                {
                 Write-Host $DC `t Netlogon Service TimeOut -ForegroundColor Yellow
                 Add-Content $report "<td bgcolor= 'Yellow' align=center><B>NetlogonTimeout</B></td>"
                 stop-job $serviceStatus
                }
                else
                {
                $serviceStatus1 = Receive-job $serviceStatus
                 if ($serviceStatus1.status -eq "Running") {
 		   Write-Host $DC `t $serviceStatus1.name `t $serviceStatus1.status -ForegroundColor Green 
         	   $svcName = $serviceStatus1.name 
         	   $svcState = $serviceStatus1.status          
         	   Add-Content $report "<td bgcolor= 'Aquamarine' align=center><B>$svcState</B></td>" 
                  }
                 else 
                  { 
       		  Write-Host $DC `t $serviceStatus1.name `t $serviceStatus1.status -ForegroundColor Red 
         	  $svcName = $serviceStatus1.name 
         	  $svcState = $serviceStatus1.status          
         	  Add-Content $report "<td bgcolor= 'Red' align=center><B>$svcState</B></td>" 
                  } 
                }
               ######################################################
                ##############NTDS Service Status################
		$serviceStatus = start-job -scriptblock {get-service -ComputerName $($args[0]) -Name "NTDS" -ErrorAction SilentlyContinue} -ArgumentList $DC
                wait-job $serviceStatus -timeout $timeout
                if($serviceStatus.state -like "Running")
                {
                 Write-Host $DC `t NTDS Service TimeOut -ForegroundColor Yellow
                 Add-Content $report "<td bgcolor= 'Yellow' align=center><B>NTDSTimeout</B></td>"
                 stop-job $serviceStatus
                }
                else
                {
                $serviceStatus1 = Receive-job $serviceStatus
                 if ($serviceStatus1.status -eq "Running") {
 		   Write-Host $DC `t $serviceStatus1.name `t $serviceStatus1.status -ForegroundColor Green 
         	   $svcName = $serviceStatus1.name 
         	   $svcState = $serviceStatus1.status          
         	   Add-Content $report "<td bgcolor= 'Aquamarine' align=center><B>$svcState</B></td>" 
                  }
                 else 
                  { 
       		  Write-Host $DC `t $serviceStatus1.name `t $serviceStatus1.status -ForegroundColor Red 
         	  $svcName = $serviceStatus1.name 
         	  $svcState = $serviceStatus1.status          
         	  Add-Content $report "<td bgcolor= 'Red' align=center><B>$svcState</B></td>" 
                  } 
                }
               ######################################################
               ####################Netlogons status##################
               add-type -AssemblyName microsoft.visualbasic 
               $cmp = "microsoft.visualbasic.strings" -as [type]
               $sysvol = start-job -scriptblock {dcdiag /test:netlogons /s:$($args[0])} -ArgumentList $DC
               wait-job $sysvol -timeout $timeout
               if($sysvol.state -like "Running")
               {
               Write-Host $DC `t Netlogons Test TimeOut -ForegroundColor Yellow
               Add-Content $report "<td bgcolor= 'Yellow' align=center><B>NetlogonsTimeout</B></td>"
               stop-job $sysvol
               }
               else
               {
               $sysvol1 = Receive-job $sysvol
               if($cmp::instr($sysvol1, "passed test NetLogons"))
                  {
                  Write-Host $DC `t Netlogons Test passed -ForegroundColor Green
                  Add-Content $report "<td bgcolor= 'Aquamarine' align=center><B>NetlogonsPassed</B></td>"
                  }
               else
                  {
                  Write-Host $DC `t Netlogons Test Failed -ForegroundColor Red
                  Add-Content $report "<td bgcolor= 'Red' align=center><B>NetlogonsFail</B></td>"
                  }
                }
               ########################################################
               ####################Replications status##################
               add-type -AssemblyName microsoft.visualbasic 
               $cmp = "microsoft.visualbasic.strings" -as [type]
               $sysvol = start-job -scriptblock {dcdiag /test:Replications /s:$($args[0])} -ArgumentList $DC
               wait-job $sysvol -timeout $timeout
               if($sysvol.state -like "Running")
               {
               Write-Host $DC `t Replications Test TimeOut -ForegroundColor Yellow
               Add-Content $report "<td bgcolor= 'Yellow' align=center><B>ReplicationsTimeout</B></td>"
               stop-job $sysvol
               }
               else
               {
               $sysvol1 = Receive-job $sysvol
               if($cmp::instr($sysvol1, "passed test Replications"))
                  {
                  Write-Host $DC `t Replications Test passed -ForegroundColor Green
                  Add-Content $report "<td bgcolor= 'Aquamarine' align=center><B>ReplicationsPassed</B></td>"
                  }
               else
                  {
                  Write-Host $DC `t Replications Test Failed -ForegroundColor Red
                  Add-Content $report "<td bgcolor= 'Red' align=center><B>ReplicationsFail</B></td>"
                  }
                }
               ########################################################
	       	       ####################Advertising status##################
               add-type -AssemblyName microsoft.visualbasic 
               $cmp = "microsoft.visualbasic.strings" -as [type]
               $sysvol = start-job -scriptblock {dcdiag /test:Advertising /s:$($args[0])} -ArgumentList $DC
               wait-job $sysvol -timeout $timeout
               if($sysvol.state -like "Running")
               {
               Write-Host $DC `t Advertising Test TimeOut -ForegroundColor Yellow
               Add-Content $report "<td bgcolor= 'Yellow' align=center><B>AdvertisingTimeout</B></td>"
               stop-job $sysvol
               }
               else
               {
               $sysvol1 = Receive-job $sysvol
               if($cmp::instr($sysvol1, "passed test Advertising"))
                  {
                  Write-Host $DC `t Advertising Test passed -ForegroundColor Green
                  Add-Content $report "<td bgcolor= 'Aquamarine' align=center><B>AdvertisingPassed</B></td>"
                  }
               else
                  {
                  Write-Host $DC `t Advertising Test Failed -ForegroundColor Red
                  Add-Content $report "<td bgcolor= 'Red' align=center><B>AdvertisingFail</B></td>"
                  }
                }
               ########################################################
	       ####################FSMOCheck status##################
               add-type -AssemblyName microsoft.visualbasic 
               $cmp = "microsoft.visualbasic.strings" -as [type]
               $sysvol = start-job -scriptblock {dcdiag /test:FSMOCheck /s:$($args[0])} -ArgumentList $DC
               wait-job $sysvol -timeout $timeout
               if($sysvol.state -like "Running")
               {
               Write-Host $DC `t FSMOCheck Test TimeOut -ForegroundColor Yellow
               Add-Content $report "<td bgcolor= 'Yellow' align=center><B>FSMOCheckTimeout</B></td>"
               stop-job $sysvol
               }
               else
               {
               $sysvol1 = Receive-job $sysvol
               if($cmp::instr($sysvol1, "passed test FsmoCheck"))
                  {
                  Write-Host $DC `t FSMOCheck Test passed -ForegroundColor Green
                  Add-Content $report "<td bgcolor= 'Aquamarine' align=center><B>FSMOCheckPassed</B></td>"
                  }
               else
                  {
                  Write-Host $DC `t FSMOCheck Test Failed -ForegroundColor Red
                  Add-Content $report "<td bgcolor= 'Red' align=center><B>FSMOCheckFail</B></td>"
                  }
                }
               ########################################################
                
} 
else
              {
Write-Host $DC `t $DC `t Ping Fail -ForegroundColor Red
		Add-Content $report "<td bgcolor= 'GainsBoro' align=center>  <B> $Identity</B></td>" 
                Add-Content $report "<td bgcolor= 'Red' align=center>  <B>Ping Fail</B></td>" 
		Add-Content $report "<td bgcolor= 'Red' align=center>  <B>Ping Fail</B></td>" 
		Add-Content $report "<td bgcolor= 'Red' align=center>  <B>Ping Fail</B></td>" 
		Add-Content $report "<td bgcolor= 'Red' align=center>  <B>Ping Fail</B></td>" 
		Add-Content $report "<td bgcolor= 'Red' align=center>  <B>Ping Fail</B></td>"
		Add-Content $report "<td bgcolor= 'Red' align=center>  <B>Ping Fail</B></td>"
		Add-Content $report "<td bgcolor= 'Red' align=center>  <B>Ping Fail</B></td>"
		Add-Content $report "<td bgcolor= 'Red' align=center>  <B>Ping Fail</B></td>"
		Add-Content $report "<td bgcolor= 'Red' align=center>  <B>Ping Fail</B></td>"
}         
       
} 

Add-Content $report "</tr>"
############################################Close HTMl Tables###########################


Add-content $report  "</table>" 
Add-Content $report "</body>" 
Add-Content $report "</html>" 


########################################################################################
#############################################Send Email#################################


$subject = "Active Directory Health Monitor" 
$body = Get-Content "E:\DOnotDelete\ADreport.htm" 
$smtp= New-Object System.Net.Mail.SmtpClient $smtphost 
$msg = New-Object System.Net.Mail.MailMessage 
$msg.To.Add($email1)
$msg.To.Add($email2)
$msg.from = $from
$msg.subject = $subject
$msg.body = $body 
$msg.isBodyhtml = $true 
$smtp.send($msg) 

########################################################################################

########################################################################################
 
         	
		




Password Policy
-------------

#################################################################################################################
# 
# Version 1.0 November 2016
# Version 2.0 September 2017  updated with new password rule
# tcsad@cna.com
# Script to Automated Email Reminders when Users Passwords due to Expire.
#
# Requires: Windows PowerShell Module for Active Directory
#
#
##################################################################################################################
# Please Configure the following variables....
$smtpServer="mailhost.cna.com"
$expireindays = 14
$from = "CNA_Enterprise_Password_Expiration_Notification@cna.com"
$logging = "Enabled" # Set to Disabled to Disable Logging
$logFile = "E:\DoNotDelete\dailylog.csv" # ie. c:\mylog.csv
$testing = "Disabled" # Set to Disabled to Email Users
#$testRecipient = "ashok.kumar2@cna.com"
#
###################################################################################################################

# Check Logging Settings
if (($logging) -eq "Enabled")
{
    # Test Log File Path
    $logfilePath = (Test-Path $logFile)
    if (($logFilePath) -ne "True")
    {
        # Create CSV File and Headers
        New-Item $logfile -ItemType File
        Add-Content $logfile "Date,Name,EmailAddress,DaystoExpire,ExpiresOn,Notified"
    }
} # End Logging Check

# System Settings
$textEncoding = [System.Text.Encoding]::UTF8
$date = Get-Date -format ddMMyyyy
# End System Settings

# Get Users From AD who are Enabled, Passwords Expire and are Not Currently Expired
Import-Module ActiveDirectory
$users = get-aduser -filter * -properties Name, PasswordNeverExpires, PasswordExpired, PasswordLastSet, EmailAddress |where {$_.Enabled -eq "True"} | where { $_.PasswordNeverExpires -eq $false } | where { $_.passwordexpired -eq $false }
$DefaultmaxPasswordAge = (Get-ADDefaultDomainPasswordPolicy).MaxPasswordAge

# Process Each User for Password Expiry
foreach ($user in $users)
{
    $Name = $user.Name
    $emailaddress = $user.emailaddress
    $passwordSetDate = $user.PasswordLastSet
    $PasswordPol = (Get-AduserResultantPasswordPolicy $user)
    $sent = "" # Reset Sent Flag
    # Check for Fine Grained Password
    if (($PasswordPol) -ne $null)
    {
        $maxPasswordAge = ($PasswordPol).MaxPasswordAge
    }
    else
    {
        # No FGP set to Domain Default
        $maxPasswordAge = $DefaultmaxPasswordAge
    }

  
    $expireson = $passwordsetdate + $maxPasswordAge
    $today = (get-date)
    $daystoexpire = (New-TimeSpan -Start $today -End $Expireson).Days
        
    # Set Greeting based on Number of Days to Expiry.

    # Check Number of Days to Expiry
    $messageDays = $daystoexpire

    if (($messageDays) -gt "1")
    {
        $messageDays = "in " + "$daystoexpire" + " days."
    }
    else
    {
        $messageDays = "today."
    }

    # Email Subject Set Here
    $subject="CNA Enterprise Password Expiration Notice"
  
    # Email Body Set Here, Note You can use HTML, including Images.
    $body ="
    Dear $name,
    <P>CNA's security policy requires all user account passwords to be changed every 90 days.<br>
    Your Password will expire $messageDays<br></p>
    <P>Password Reset Instructions: <br></p>

    For most CNA users, press CTRL+ALT+DEL while actively logged into your computer. Click Change a Password and then complete the required fields.<br>

    <P>All passwords must confirm to the Construction Standards described below<br></P>

    1) Must be eight characters in length (no spaces)<br>
    2) Must contain at least one number (0-9)<br>
    3) Must contain at least two letters (A-Z and a-z)<br>
    4) Must contain both upper and lower case letters<br>
    5) Must be changed at least every 90 days<br>
    6) Must contain NO MORE than two identical consecutive letters or numbers<br>
    7) Must NOT contain the User-ID (CID), first name or last name as part of the password<br>
    8) Must NOT reuse one of your last six passwords<br>
    9) Must NOT contain words commonly found within a dictionary including but not limited to:  days of the week, holidays, cities, and sports teams.<br>
    Consider using a phrase. For example,  'WE are Happy Every Day, random number, random number, random number' becomes 'Wahed739'<br>

    <B> <p style='margin-left:.6in'>NOTE: If you are a mainframe, OS2/TAP user, please do not use special characters (symbols) and ensure your password is exactly 8 characters, otherwise the password will not sync properly.</p> </B>

    <P>Password Reset Help:<br></P>

    <P>If you have questions, please contact help@CNA by calling 312-822-HELP or 800-CNA-SERV, and selecting option 3 for Technology Support, then option 1 for the IT Service Desk. You can also use Self Service to create your own case.<br></P>

    <P>For more details on CNA IT Security policies, go to https://security.cna.com/PolicyAndEducation/Pages/default.aspx <br></P>

    <p>Thank You, <br> 
    <p>CNA Information Security <br> 
    </P>"

   
    # If Testing Is Enabled - Email Administrator
    if (($testing) -eq "Enabled")
    {
        $emailaddress = $testRecipient
    } # End Testing

    # If a user has no email address listed
   if (($emailaddress) -eq $null)
   {
       $emailaddress = $testRecipient    
    }# End No Valid Email

    # Send Email Message
    if (($daystoexpire -ge "0") -and ($daystoexpire -lt $expireindays))
    {
        $sent = "Yes"
        # If Logging is Enabled Log Details
        if (($logging) -eq "Enabled")
        {
            Add-Content $logfile "$date,$Name,$emailaddress,$daystoExpire,$expireson,$sent" 
        }
        # Send Email Message
        Send-Mailmessage -smtpServer $smtpServer -from $from -to $emailaddress -subject $subject -body $body -bodyasHTML -priority High -Encoding $textEncoding   

    } # End Send Message
    else # Log Non Expiring Password
    {
        $sent = "No"
        # If Logging is Enabled Log Details
        if (($logging) -eq "Enabled")
        {
            Add-Content $logfile "$date,$Name,$emailaddress,$daystoExpire,$expireson,$sent" 
        }        
    }
    
} # End User Processing



# End
---------------------------------------------------------------------------







---- Citrix Health ------------------

#==============================================================================================
#
# Description: This script checks a Citrix XenDesktop and/or XenApp 7.x Farm
# It generates a HTML output File which will be sent as Email.
#
# Initial versions tested on XenApp/XenDesktop 7.6 and XenDesktop 5.6 
# Newest version tested on XenApp/XenDesktop 7.11-7.13
#
# Prerequisite: Config file, a XenDesktop Controller with according privileges necessary 
# Config file:  In order for the script to work properly, it needs a configuration file.
#               This has the same name as the script, with extension _Parameters.
#               The script name can't contain any another point, even with a version.
#               Example: Script = "XA and XD HealthCheck.ps1", Config = "XA and XD HealthCheck_Parameters.xml"
#
# Call by : Manual or by Scheduled Task, e.g. once a day
#           !! If you run it as scheduled task you need to add with argument “non interactive” 
#           or your user has interactive persmission!
#
# Code History at the end of the file
#
#==============================================================================================

#Don't change below here if you don't know what you are doing ... 
#==============================================================================================
# Load only the snap-ins, which are used
if ((Get-PSSnapin "Citrix.Broker.Admin.*" -EA silentlycontinue) -eq $null) {
try { Add-PSSnapin Citrix.Broker.Admin.* -ErrorAction Stop }
catch { write-error "Error Get-PSSnapin Citrix.Broker.Admin.* Powershell snapin"; Return }
}

#==============================================================================================
# Import Variables from XML:

If (![string]::IsNullOrEmpty($hostinvocation)) {
	[string]$Global:ScriptPath = [System.IO.Path]::GetDirectoryName([System.Windows.Forms.Application]::ExecutablePath)
	[string]$Global:ScriptFile = [System.IO.Path]::GetFileName([System.Windows.Forms.Application]::ExecutablePath)
	[string]$global:ScriptName = [System.IO.Path]::GetFileNameWithoutExtension([System.Windows.Forms.Application]::ExecutablePath)
} ElseIf ($Host.Version.Major -lt 3) {
	[string]$Global:ScriptPath = Split-Path -parent $MyInvocation.MyCommand.Definition
	[string]$Global:ScriptFile = Split-Path -Leaf $script:MyInvocation.MyCommand.Path
	[string]$global:ScriptName = $ScriptFile.Split('.')[0].Trim()
} Else {
	[string]$Global:ScriptPath = $PSScriptRoot
	[string]$Global:ScriptFile = Split-Path -Leaf $PSCommandPath
	[string]$global:ScriptName = $ScriptFile.Split('.')[0].Trim()
}

Set-StrictMode -Version Latest

# Import parameter file
$Global:ParameterFile = $ScriptName + "_Parameters.xml"
$Global:ParameterFilePath = $ScriptPath
[xml]$cfg = Get-Content ($ParameterFilePath + "\" + $ParameterFile) # Read content of XML file

# Import variables
Function New-XMLVariables {
	# Create a variable reference to the XML file
	$cfg.Settings.Variables.Variable | foreach {
		# Set Variables contained in XML file
		$VarValue = $_.Value
		$CreateVariable = $True # Default value to create XML content as Variable
		switch ($_.Type) {
			# Format data types for each variable 
			'[string]' { $VarValue = [string]$VarValue } # Fixed-length string of Unicode characters
			'[char]' { $VarValue = [char]$VarValue } # A Unicode 16-bit character
			'[byte]' { $VarValue = [byte]$VarValue } # An 8-bit unsigned character
            '[bool]' { If ($VarValue.ToLower() -eq 'false'){$VarValue = [bool]$False} ElseIf ($VarValue.ToLower() -eq 'true'){$VarValue = [bool]$True} } # An boolean True/False value
			'[int]' { $VarValue = [int]$VarValue } # 32-bit signed integer
			'[long]' { $VarValue = [long]$VarValue } # 64-bit signed integer
			'[decimal]' { $VarValue = [decimal]$VarValue } # A 128-bit decimal value
			'[single]' { $VarValue = [single]$VarValue } # Single-precision 32-bit floating point number
			'[double]' { $VarValue = [double]$VarValue } # Double-precision 64-bit floating point number
			'[DateTime]' { $VarValue = [DateTime]$VarValue } # Date and Time
			'[Array]' { $VarValue = [Array]$VarValue.Split(',') } # Array
			'[Command]' { $VarValue = Invoke-Expression $VarValue; $CreateVariable = $False } # Command
		}
		If ($CreateVariable) { New-Variable -Name $_.Name -Value $VarValue -Scope $_.Scope -Force }
	}
}

New-XMLVariables


$PvsWriteMaxSizeInGB = $PvsWriteMaxSize * 1Gb

ForEach ($DeliveryController in $DeliveryControllers){
    If ($DeliveryController -ieq "LocalHost"){
        $DeliveryController = [System.Net.DNS]::GetHostByName('').HostName
    }
    If (Test-Connection $DeliveryController) {
        $AdminAddress = $DeliveryController
        break
    }
}

$ReportDate = (Get-Date -UFormat "%A, %d. %B %Y %R")


$currentDir = Split-Path $MyInvocation.MyCommand.Path
$outputpath = Join-Path $currentDir "" #add here a custom output folder if you wont have it on the same directory
$outputdate = Get-Date -Format 'yyyyMMddHHmm'
$logfile = Join-Path $outputpath ("CTXXDHealthCheck.log")
$resultsHTM = Join-Path $outputpath ("CTXXDHealthCheck.htm") #add $outputdate in filename if you like
  
#Header for Table "XD/XA Controllers" Get-BrokerController
$XDControllerFirstheaderName = "ControllerServer"
$XDControllerHeaderNames = "Ping", 	"State","DesktopsRegistered", 	"ActiveSiteServices"
$XDControllerHeaderWidths = "2",	"2", 	"2", 					"10"				
$XDControllerTableWidth= 1200
#foreach ($C in $C)
{
#    $XDControllerHeaderNames += "$($C)Freespace"
    $XDControllerHeaderWidths += "4"
}
$XDControllerHeaderNames +=  	"AvgCPU", 	"MemUsg", 	"Uptime"
$XDControllerHeaderWidths +=    "4",		"4",		"4"



#Header for Table "CTX Licenses" Get-BrokerController
$CTXLicFirstheaderName = "LicenseName"
$CTXLicHeaderNames = "LicenseServer", 	"Count","InUse", 	"Available"
$CTXLicHeaderWidths = "4",	"2", 	"2", 					"2"
$CTXLicTableWidth= 900


#Header for HyperVisorConnection
$HyperVisorHeaderName = "Name"
$HyperVisorHeaderNames = "State", "IsReady"
$HyperVisorWidths =      "4",      "4",         "4"      
$HyperVisorTablewidth = 900

  
#Header for Table "MachineCatalogs" Get-BrokerCatalog
$CatalogHeaderName = "CatalogName"
$CatalogHeaderNames = 	"AssignedToUser", 	"AssignedToDG", "NotToUserAssigned","ProvisioningType", "AllocationType"
$CatalogWidths = 		"4",				"8", 			"8", 				"8", 				"8", 				"4"
$CatalogTablewidth = 900

#Header for table "User Session" Get-BrokerSession
$SessionHeaderName = "MachineName"
$SessionHeaderNames = "BrokeringUserName", "SessionState", "ClientName"
$SessionWidths = 	   "8", 		 "8", 		      "8", 				"4"
$SessionTablewidth = 900


#Header for Table "DeliveryGroups" Get-BrokerDesktopGroup
$AssigmentFirstheaderName = "DeliveryGroup"
$vAssigmentHeaderNames = 	"PublishedName","DesktopKind", "SessionSupport", 	"TotalMachines","DesktopsAvailable","DesktopsUnregistered", "MaintenanceMode"
$vAssigmentHeaderWidths = 	"4", 			"4", 			"4", 	"4", 		"4", 				"4", 					"4", 			"4", 			"2", 			"2", 			"2"
$Assigmenttablewidth = 900

$VDIHeaderNames = "CatalogName","DeliveryGroup","PowerState", "Ping", "MaintMode", 	"Uptime", 	"RegState","VDAVersion","AssociatedUserNames", "Tags", "HostedOn", "displaymode", "OSBuild"
$VDIHeaderWidths = "4", "4",		"4","4", 	"4", 				"4", 		"4", 				"4",			  "4",			  "4",			  "4",			  "4", "4", "4", 		"4"

$VDItablewidth = 1200
  
#Header for Table "XenApp Checks" Get-BrokerMachine
$XenAppfirstheaderName = "XenApp-Server"
$XenAppHeaderNames = "CatalogName", "DeliveryGroup", "Serverload", 	"Ping", "MaintMode", 	"RegState", "Spooler",  	"CitrixPrint"
$XenAppHeaderWidths = "4", 			"4", 				"4", 			"4", 	"4", 		"4", 		"4", 		"4", 		"4", 		 	"4", 		"4"
#foreach ($disk in $)
{
   # $XDControllerHeaderNames += "$($C)Freespace"
   # $XDControllerHeaderWidths += "4"
}

if ($ShowConnectedXenAppUsers -eq "1") { 

	$XenAppHeaderNames += "AvgCPU", 	"MemUsg"
	$XenAppHeaderWidths +="4",		"4",			  "4",			"0",			"4",			"4",			"4","4"
}
else { 
	$XenAppHeaderNames += "AvgCPU", 	"MemUsg"
	$XenAppHeaderWidths +="4",		"4",		"4",			  "0",			"4",			"4","4"

}

$XenApptablewidth = 1200
  
#==============================================================================================
#log function
function LogMe() {
Param(
[parameter(Mandatory = $true, ValueFromPipeline = $true)] $logEntry,
[switch]$display,
[switch]$error,
[switch]$warning,
[switch]$progress
)
  
if ($error) { $logEntry = "[ERROR] $logEntry" ; Write-Host "$logEntry" -Foregroundcolor Red }
elseif ($warning) { Write-Warning "$logEntry" ; $logEntry = "[WARNING] $logEntry" }
elseif ($progress) { Write-Host "$logEntry" -Foregroundcolor Green }
elseif ($display) { Write-Host "$logEntry" }
  
#$logEntry = ((Get-Date -uformat "%D %T") + " - " + $logEntry)
$logEntry | Out-File $logFile -Append
}
  
#==============================================================================================
function Ping([string]$hostname, [int]$timeout = 200) {
$ping = new-object System.Net.NetworkInformation.Ping #creates a ping object
try { $result = $ping.send($hostname, $timeout).Status.ToString() }
catch { $result = "Failure" }
return $result
}
#==============================================================================================
# The function will check the processor counter and check for the CPU usage. Takes an average CPU usage for 5 seconds. It check the current CPU usage for 5 secs.
Function CheckCpuUsage() 
{ 
	param ($hostname)
	Try { $CpuUsage=(get-counter -ComputerName $hostname -Counter "\Processor(_Total)\% Processor Time" -SampleInterval 1 -MaxSamples 5 -ErrorAction Stop | select -ExpandProperty countersamples | select -ExpandProperty cookedvalue | Measure-Object -Average).average
    	$CpuUsage = [math]::round($CpuUsage, 1); return $CpuUsage
	} Catch { "Error returned while checking the CPU usage. Perfmon Counters may be fault" | LogMe -error; return 101 } 
}
#============================================================================================== 
# The function check the memory usage and report the usage value in percentage
Function CheckMemoryUsage() 
{ 
	param ($hostname)
    Try 
	{   $SystemInfo = (Get-WmiObject -computername $hostname -Class Win32_OperatingSystem -ErrorAction Stop | Select-Object TotalVisibleMemorySize, FreePhysicalMemory)
    	$TotalRAM = $SystemInfo.TotalVisibleMemorySize/1MB 
    	$FreeRAM = $SystemInfo.FreePhysicalMemory/1MB 
    	$UsedRAM = $TotalRAM - $FreeRAM 
    	$RAMPercentUsed = ($UsedRAM / $TotalRAM) * 100 
    	$RAMPercentUsed = [math]::round($RAMPercentUsed, 2);
    	return $RAMPercentUsed
	} Catch { "Error returned while checking the Memory usage. Perfmon Counters may be fault" | LogMe -error; return 101 } 
}
#==============================================================================================

# The function check the HardDrive usage and report the usage value in percentage and free space
Function CheckHardDiskUsage() 
{ 
	param ($hostname, $deviceID)
    Try 
	{   
    	$HardDisk = $null
		$HardDisk = Get-WmiObject Win32_LogicalDisk -ComputerName $hostname -Filter "DeviceID='$deviceID'" -ErrorAction Stop | Select-Object Size,FreeSpace
        if ($HardDisk -ne $null)
		{
		$DiskTotalSize = $HardDisk.Size 
        $DiskFreeSpace = $HardDisk.FreeSpace 
        $frSpace=[Math]::Round(($DiskFreeSpace/1073741824),2)
		$PercentageDS = (($DiskFreeSpace / $DiskTotalSize ) * 100); $PercentageDS = [math]::round($PercentageDS, 2)
		
		Add-Member -InputObject $HardDisk -MemberType NoteProperty -Name PercentageDS -Value $PercentageDS
		Add-Member -InputObject $HardDisk -MemberType NoteProperty -Name frSpace -Value $frSpace
		} 
		
    	return $HardDisk
	} Catch { "Error returned while checking the Hard Disk usage. Perfmon Counters may be fault" | LogMe -error; return $null } 
}


#==============================================================================================
Function writeHtmlHeader
{
param($title, $fileName)
$date = $ReportDate
$head = @"
<html>
<head>
<meta http-equiv='Content-Type' content='text/html; charset=iso-8859-1'>
<title>$title</title>
<STYLE TYPE="text/css">
<!--
td {
font-family: Tahoma;
font-size: 11px;
border-top: 1px solid #999999;
border-right: 1px solid #999999;
border-bottom: 1px solid #999999;
border-left: 1px solid #999999;
padding-top: 0px;
padding-right: 0px;
padding-bottom: 0px;
padding-left: 0px;
overflow: hidden;
}
body {
margin-left: 5px;
margin-top: 5px;
margin-right: 0px;
margin-bottom: 10px;
table {
table-layout:fixed;
border: thin solid #000000;
}
-->
</style>
</head>
<body>
<table width='1200'>
<tr bgcolor='#CCCCCC'>
<td colspan='7' height='48' align='center' valign="middle">
<font face='tahoma' color='#003399' size='4'>
<strong>$title - $date</strong></font>
</td>
</tr>
</table>
"@
$head | Out-File $fileName
}
  
# ==============================================================================================
Function writeTableHeader
{
param($fileName, $firstheaderName, $headerNames, $headerWidths, $tablewidth)
$tableHeader = @"
  
<table width='$tablewidth'><tbody>
<tr bgcolor=#CCCCCC>
<td width='6%' align='center'><strong>$firstheaderName</strong></td>
"@
  
$i = 0
while ($i -lt $headerNames.count) {
$headerName = $headerNames[$i]
$headerWidth = $headerWidths[$i]
$tableHeader += "<td width='" + $headerWidth + "%' align='center'><strong>$headerName</strong></td>"
$i++
}
  
$tableHeader += "</tr>"
  
$tableHeader | Out-File $fileName -append
}
  
# ==============================================================================================
Function writeTableFooter
{
param($fileName)
"</table><br/>"| Out-File $fileName -append
}
  
#==============================================================================================
Function writeData
{
param($data, $fileName, $headerNames)

$tableEntry  =""  
$data.Keys | sort | foreach {
$tableEntry += "<tr>"
$computerName = $_
$tableEntry += ("<td bgcolor='#CCCCCC' align=center><font color='#003399'>$computerName</font></td>")
#$data.$_.Keys | foreach {
$headerNames | foreach {
#"$computerName : $_" | LogMe -display
try {
if ($data.$computerName.$_[0] -eq "SUCCESS") { $bgcolor = "#387C44"; $fontColor = "#FFFFFF" }
elseif ($data.$computerName.$_[0] -eq "WARNING") { $bgcolor = "#FF7700"; $fontColor = "#FFFFFF" }
elseif ($data.$computerName.$_[0] -eq "ERROR") { $bgcolor = "#FF0000"; $fontColor = "#FFFFFF" }
else { $bgcolor = "#CCCCCC"; $fontColor = "#003399" }
$testResult = $data.$computerName.$_[1]
}
catch {
$bgcolor = "#CCCCCC"; $fontColor = "#003399"
$testResult = ""
}
$tableEntry += ("<td bgcolor='" + $bgcolor + "' align=center><font color='" + $fontColor + "'>$testResult</font></td>")
}
$tableEntry += "</tr>"
}
$tableEntry | Out-File $fileName -append
}

# ==============================================================================================
Function ToHumanReadable()
{
  param($timespan)
  
  If ($timespan.TotalHours -lt 1) {
    return $timespan.Minutes + "minutes"
  }

  $sb = New-Object System.Text.StringBuilder
  If ($timespan.Days -gt 0) {
    [void]$sb.Append($timespan.Days)
    [void]$sb.Append(" days")
    [void]$sb.Append(", ")    
  }
  If ($timespan.Hours -gt 0) {
    [void]$sb.Append($timespan.Hours)
    [void]$sb.Append(" hours")
  }
  If ($timespan.Minutes -gt 0) {
    [void]$sb.Append(" and ")
    [void]$sb.Append($timespan.Minutes)
    [void]$sb.Append(" minutes")
  }
  return $sb.ToString()
}

# ==============================================================================================
<#
	.SYNOPSIS
		Get information about user that set maintenance mode.
	
	.DESCRIPTION
		Over the Citrix XenDeesktop or XenApp log database, you can finde the user that
		set the maintenance mode of an worker.
		This is version 1.0.
	
	.PARAMETER AdminAddress
		Specifies the address of the Delivery Controller to which the PowerShell module will connect. This can be provided as a host name or an IP address.
	
	.PARAMETER Credential
		Specifies a user account that has permission to perform this action. The default is the current user.
	
	.EXAMPLE
		Get-CitrixMaintenanceInfo
		Get the informations on an delivery controller with nedded credentials.
	
	.EXAMPLE
		Get-CitrixMaintenanceInfo -AdminAddress server.domain.tld -Credential (Get-Credential)
		Use sever.domain.tld to get the log informations and use credentials.
	.LINK
		http://www.beckmann.ch/blog/2016/11/01/get-user-who-set-maintenance-mode-for-a-server-or-client/
#>
function Get-CitrixMaintenanceInfo {
	[CmdletBinding()]
	[OutputType([System.Management.Automation.PSCustomObject])]
	param
	(
		[Parameter(Mandatory = $false,
				   ValueFromPipeline = $true,
				   Position = 0)]
		[System.String[]]$AdminAddress = 'localhost',
		[Parameter(Mandatory = $false,
				   ValueFromPipeline = $true,
				   Position = 1)]
		[System.Management.Automation.PSCredential]$Credential
	) # Param
	
	Try {
		$PSSessionParam = @{ }
		If ($null -ne $Credential) { $PSSessionParam['Credential'] = $Credential } #Splatting
		If ($null -ne $AdminAddress) { $PSSessionParam['ComputerName'] = $AdminAddress } #Splatting
		
		# Create Session
		$Session = New-PSSession -ErrorAction Stop @PSSessionParam
		
		# Create script block for invoke command
		$ScriptBlock = {
			if ((Get-PSSnapin "Get-PSSnapin Citrix.ConfigurationLogging.Admin.*" -ErrorAction silentlycontinue) -eq $null) {
				try { Add-PSSnapin Citrix.ConfigurationLogging.Admin.* -ErrorAction Stop } catch { write-error "Error Get-PSSnapin Citrix.ConfigurationLogging.Admin.* Powershell snapin"; Return }
			} #If
			
			$Date = Get-Date
			$StartDate = $Date.AddDays(-7) # Hard coded value for how many days back
			$EndDate = $Date
			
			# Command to get the informations from log
			$LogEntrys = Get-LogLowLevelOperation -MaxRecordCount 1000000 -Filter { StartTime -ge $StartDate -and EndTime -le $EndDate } | Where { $_.Details.PropertyName -eq 'MAINTENANCEMODE' } | Sort EndTime -Descending
			
			# Build an object with the data for the output
			[array]$arrMaintenance = @()
			ForEach ($LogEntry in $LogEntrys) {
				$TempObj = New-Object -TypeName psobject -Property @{
					User = $LogEntry.User
					TargetName = $LogEntry.Details.TargetName
					NewValue = $LogEntry.Details.NewValue
					PreviousValue = $LogEntry.Details.PreviousValue
					StartTime = $LogEntry.Details.StartTime
					EndTime = $LogEntry.Details.EndTime
				} #TempObj
				$arrMaintenance += $TempObj
			} #ForEach				
			$arrMaintenance
		} # ScriptBlock
		
		# Run the script block with invoke-command, return the values and close the session
		$MaintLogs = Invoke-Command -Session $Session -ScriptBlock $ScriptBlock -ErrorAction Stop
		Write-Output $MaintLogs
		Remove-PSSession -Session $Session -ErrorAction SilentlyContinue
		
	} Catch {
		Write-Warning "Error occurs: $_"
	} # Try/Catch
} # Get-CitrixMaintenanceInfo

#==============================================================================================

$wmiOSBlock = {param($computer)
  try { $wmi=Get-WmiObject -class Win32_OperatingSystem -computer $computer }
  catch { $wmi = $null }
  return $wmi
}

#==============================================================================================
# == MAIN SCRIPT ==
#==============================================================================================
rm $logfile -force -EA SilentlyContinue
rm $resultsHTM -force -EA SilentlyContinue
  
"#### Begin with Citrix XenDestop / XenApp HealthCheck ######################################################################" | LogMe -display -progress
  
" " | LogMe -display -progress

# get some farm infos, which will be presented in footer 
$dbinfo = Get-BrokerDBConnection -AdminAddress $AdminAddress
$brokersiteinfos = Get-BrokerSite
$lsname = $brokersiteinfos.LicenseServerName
$lsport = $brokersiteinfos.LicenseServerPort
$CLeasing = $brokersiteinfos.ConnectionLeasingEnabled
#$LHC =$brokersiteinfos.LocalHostCacheEnabled


# Log the loaded Citrix PS Snapins
(Get-PSSnapin "Citrix.*" -EA silentlycontinue).Name | ForEach {"PSSnapIn: " + $_ | LogMe -display -progress}
  
#== Controller Check ============================================================================================
"Check Controllers #############################################################################" | LogMe -display -progress
  
" " | LogMe -display -progress
  
$ControllerResults = @{}
$Controllers = Get-BrokerController -AdminAddress $AdminAddress

# Get first DDC version (should be all the same unless an upgrade is in progress)
$ControllerVersion = $Controllers[0].ControllerVersion
"Version: $controllerversion " | LogMe -display -progress
  
if ($ControllerVersion -lt 7 ) {
  "XenDesktop/XenApp Version below 7.x ($controllerversion) - only DesktopCheck will be performed" | LogMe -display -progress
  #$ShowXenAppTable = 0 #doesent work with XML variables
  Set-Variable -Name ShowXenAppTable -Value 0
} else { 
  "XenDesktop/XenApp Version above 7.x ($controllerversion) - XenApp and DesktopCheck will be performed" | LogMe -display -progress
}

foreach ($Controller in $Controllers) {
$tests = @{}
  
#Name of $Controller
$ControllerDNS = $Controller | %{ $_.DNSName }
"Controller: $ControllerDNS" | LogMe -display -progress
  
#Ping $Controller
$result = Ping $ControllerDNS 100
if ($result -ne "SUCCESS") { $tests.Ping = "Error", $result }
else { $tests.Ping = "SUCCESS", $result 

#Now when Ping is ok also check this:
  
#State of this controller
$ControllerState = $Controller | %{ $_.State }
"State: $ControllerState" | LogMe -display -progress
if ($ControllerState -ne "Active") { $tests.State = "ERROR", $ControllerState }
else { $tests.State = "SUCCESS", $ControllerState }
  
#DesktopsRegistered on this controller
$ControllerDesktopsRegistered = $Controller | %{ $_.DesktopsRegistered }
"Registered: $ControllerDesktopsRegistered" | LogMe -display -progress
$tests.DesktopsRegistered = "NEUTRAL", $ControllerDesktopsRegistered
  
#ActiveSiteServices on this controller
$ActiveSiteServices = $Controller | %{ $_.ActiveSiteServices }
"ActiveSiteServices $ActiveSiteServices" | LogMe -display -progress
$tests.ActiveSiteServices = "NEUTRAL", $ActiveSiteServices


#==============================================================================================
#               CHECK CPU AND MEMORY USAGE 
#==============================================================================================

        # Check the AvgCPU value for 5 seconds
        $AvgCPUval = CheckCpuUsage ($ControllerDNS)
		#$VDtests.LoadBalancingAlgorithm = "SUCCESS", "LB is set to BEST EFFORT"} 
			
        if( [int] $AvgCPUval -lt 75) { "CPU usage is normal [ $AvgCPUval % ]" | LogMe -display; $tests.AvgCPU = "SUCCESS", "$AvgCPUval %" }
		elseif([int] $AvgCPUval -lt 85) { "CPU usage is medium [ $AvgCPUval % ]" | LogMe -warning; $tests.AvgCPU = "WARNING", "$AvgCPUval %" }   	
		elseif([int] $AvgCPUval -lt 95) { "CPU usage is high [ $AvgCPUval % ]" | LogMe -error; $tests.AvgCPU = "ERROR", "$AvgCPUval %" }
		elseif([int] $AvgCPUval -eq 101) { "CPU usage test failed" | LogMe -error; $tests.AvgCPU = "ERROR", "Err" }
        else { "CPU usage is Critical [ $AvgCPUval % ]" | LogMe -error; $tests.AvgCPU = "ERROR", "$AvgCPUval %" }   
		$AvgCPUval = 0

        # Check the Physical Memory usage       
        $UsedMemory = CheckMemoryUsage ($ControllerDNS)
        if( $UsedMemory -lt 75) { "Memory usage is normal [ $UsedMemory % ]" | LogMe -display; $tests.MemUsg = "SUCCESS", "$UsedMemory %" }
		elseif( [int] $UsedMemory -lt 85) { "Memory usage is medium [ $UsedMemory % ]" | LogMe -warning; $tests.MemUsg = "WARNING", "$UsedMemory %" }   	
		elseif( [int] $UsedMemory -lt 95) { "Memory usage is high [ $UsedMemory % ]" | LogMe -error; $tests.MemUsg = "ERROR", "$UsedMemory %" }
		elseif( [int] $UsedMemory -eq 101) { "Memory usage test failed" | LogMe -error; $tests.MemUsg = "ERROR", "Err" }
        else { "Memory usage is Critical [ $UsedMemory % ]" | LogMe -error; $tests.MemUsg = "ERROR", "$UsedMemory %" }   
		$UsedMemory = 0  

        foreach ($disk in $diskLettersControllers)
        {
            # Check Disk Usage 
		    $HardDisk = CheckHardDiskUsage -hostname $ControllerDNS -deviceID "$($disk):"
		    if ($HardDisk -ne $null) {	
			    $XAPercentageDS = $HardDisk.PercentageDS
			    $frSpace = $HardDisk.frSpace
			
	            If ( [int] $XAPercentageDS -gt 15) { "Disk Free is normal [ $XAPercentageDS % ]" | LogMe -display; $tests."$($disk)Freespace" = "SUCCESS", "$frSpace GB" } 
			    ElseIf ([int] $XAPercentageDS -eq 0) { "Disk Free test failed" | LogMe -error; $tests."$($disk)Freespace" = "ERROR", "Err" }
			    ElseIf ([int] $XAPercentageDS -lt 5) { "Disk Free is Critical [ $XAPercentageDS % ]" | LogMe -error; $tests."$($disk)Freespace" = "ERROR", "$frSpace GB" } 
			    ElseIf ([int] $XAPercentageDS -lt 15) { "Disk Free is Low [ $XAPercentageDS % ]" | LogMe -warning; $tests."$($disk)Freespace" = "WARNING", "$frSpace GB" }     
	            Else { "Disk Free is Critical [ $XAPercentageDS % ]" | LogMe -error; $tests."$($disk)Freespace" = "ERROR", "$frSpace GB" }  
        
			    $XAPercentageDS = 0
			    $frSpace = 0
			    $HardDisk = $null
		    }
        }
		
    # Check uptime (Query over WMI)
    $tests.WMI = "ERROR","Error"
    try { $wmi=Get-WmiObject -class Win32_OperatingSystem -computer $ControllerDNS }
    catch { $wmi = $null }

    # Perform WMI related checks
    if ($wmi -ne $null) {
        $tests.WMI = "SUCCESS", "Success"
        $LBTime=$wmi.ConvertToDateTime($wmi.Lastbootuptime)
        [TimeSpan]$uptime=New-TimeSpan $LBTime $(get-date)

        if ($uptime.days -lt $minUpTimeDaysDDC){
            "reboot warning, last reboot: {0:D}" -f $LBTime | LogMe -display -warning
            $tests.Uptime = "WARNING", (ToHumanReadable($uptime))
        }
        else { $tests.Uptime = "SUCCESS", (ToHumanReadable($uptime)) }
    }
    else { "WMI connection failed - check WMI for corruption" | LogMe -display -error }
}


  
" --- " | LogMe -display -progress
#Fill $tests into array
$ControllerResults.$ControllerDNS = $tests
}
  
#==================================================HyperVisor HealthCheck==================================================================
"Check HyperVisor Status####################################################################################" | LogMe -display -progress
" " | LogMe -display -progress
  
# Check XenApp only if $ShowXenAppTable is 1
if($ShowXenAppTable -eq 1 ) {
$HyperVisorResults = @{}
  
$Hypervisors = Get-BrokerHypervisorconnection -MaxRecordCount 100000 -AdminAddress $AdminAddress 

$Maintenance = Get-CitrixMaintenanceInfo -AdminAddress $AdminAddress
  
foreach ($Hypervisor in $Hypervisors) {
$tests = @{}

# Column Hypervisor Name
$Name = $Hypervisor | %{ $_.Name }
"Name: $Name" | LogMe -display -progress
$tests.Name = "NEUTRAL", $Name
  

# Column Hypervisor State
$State = $Hypervisor | %{ $_.State }
"State: $State" | LogMe -display -progress
if ($State -ne "On") { $tests.State = "ERROR", $State }
else { $tests.State = "SUCCESS", $State }

# Column Hypervisor Isready
$IsReady = $Hypervisor | %{ $_.IsReady }
"IsReady: $IsReady" | LogMe -display -progress
if ($IsReady -ne "True") { $tests.IsReady = "ERROR", $IsReady }
else { $tests.IsReady = "SUCCESS", $IsReady }



 "", ""
        $HyperVisorResults.$Name = $tests
      }  
      " --- " | LogMe -display -progress
    }



    #== Catalog Check ============================================================================================
    "Check Catalog #################################################################################" | LogMe -display -progress
    " " | LogMe -display -progress
  
    $CatalogResults = @{}
    $Catalogs = Get-BrokerCatalog -AdminAddress $AdminAddress
  
    foreach ($Catalog in $Catalogs) {
      $tests = @{}
  
      #Name of MachineCatalog
      $CatalogName = $Catalog | %{ $_.Name }
      "Catalog: $CatalogName" | LogMe -display -progress

      if ($ExcludedCatalogs -contains $CatalogName) {
        "Excluded Catalog, skipping" | LogMe -display -progress
      } else {
        #CatalogAssignedCount
        $CatalogAssignedCount = $Catalog | %{ $_.AssignedCount }
        "Assigned: $CatalogAssignedCount" | LogMe -display -progress
        $tests.AssignedToUser = "NEUTRAL", $CatalogAssignedCount
  
        #CatalogUnassignedCount
        $CatalogUnAssignedCount = $Catalog | %{ $_.UnassignedCount }
        "Unassigned: $CatalogUnAssignedCount" | LogMe -display -progress
        $tests.NotToUserAssigned = "NEUTRAL", $CatalogUnAssignedCount
  
        # Assigned to DeliveryGroup
        $CatalogUsedCountCount = $Catalog | %{ $_.UsedCount }
        "Used: $CatalogUsedCountCount" | LogMe -display -progress
        $tests.AssignedToDG = "NEUTRAL", $CatalogUsedCountCount

        #MinimumFunctionalLevel
	    $MinimumFunctionalLevel = $Catalog | %{ $_.MinimumFunctionalLevel }
	    "MinimumFunctionalLevel: $MinimumFunctionalLevel" | LogMe -display -progress
        $tests.MinimumFunctionalLevel = "NEUTRAL", $MinimumFunctionalLevel
  
         #ProvisioningType
         $CatalogProvisioningType = $Catalog | %{ $_.ProvisioningType }
         "ProvisioningType: $CatalogProvisioningType" | LogMe -display -progress
         $tests.ProvisioningType = "NEUTRAL", $CatalogProvisioningType
  
         #AllocationType
         $CatalogAllocationType = $Catalog | %{ $_.AllocationType }
         "AllocationType: $CatalogAllocationType" | LogMe -display -progress
         $tests.AllocationType = "NEUTRAL", $CatalogAllocationType
  
        "", ""
        $CatalogResults.$CatalogName = $tests
      }  
      " --- " | LogMe -display -progress
    }


# ======= XenAppSession Check ========
"Check XenApp Session ####################################################################################" | LogMe -display -progress
" " | LogMe -display -progress
  
# Check XenApp only if $ShowXenAppTable is 1
if($ShowXenAppTable -eq 1 ) {
$SessionResults = @{}
  
$XASessions = Get-BrokerSession -MaxRecordCount 100000 -AdminAddress $AdminAddress | Where-Object {$_.SessionType -eq "Application"}

$Maintenance = Get-CitrixMaintenanceInfo -AdminAddress $AdminAddress
  
foreach ($XASession in $XASessions) {
$tests = @{}

# Column SessionState
$BrokeringUserName = $XASession | %{ $_.BrokeringUserName }
"UserName: $BrokeringUserName" | LogMe -display -progress
$tests.BrokeringUserName = "NEUTRAL", $BrokeringUserName
  
# Column Name of catalog
#$CatalogName = $XASession | %{ $_.CatalogName }
#"CatalogName: $CatalogName" | LogMe -display -progress
  
# Column ClientAddress
$MachineName = $XASession | %{ $_.MachineName }
"MachineName: $MachineName" | LogMe -display -progress
$tests.MachineName = "NEUTRAL", $MachineName
  
# Column MachineSummaryState
#$PowerState = $XASession | %{ $_.PowerState }
#"PowerState: $PowerState" | LogMe -display -progress
#$tests.PowerState = "NEUTRAL", $PowerState

# Column SessionState
$SessionState = $XASession | %{ $_.SessionState }
"SessionState: $SessionState" | LogMe -display -progress
if ($SessionState -ne "Active") { $tests.SessionState = "ERROR", $SessionState }
else { $tests.SessionState = "SUCCESS", $SessionState }


# Column Client Name
$ClientName = $XASession | %{ $_.ClientName }
"ClientName: $ClientName" | LogMe -display -progress
$tests.ClientName = "NEUTRAL", $ClientName


 "", ""
        $SessionResults.$MachineName = $tests
      }  
      " --- " | LogMe -display -progress
    }


  
#== DeliveryGroups Check ============================================================================================
"Check Assigments #############################################################################" | LogMe -display -progress
  
" " | LogMe -display -progress
  
$AssigmentsResults = @{}
$Assigments = Get-BrokerDesktopGroup -AdminAddress $AdminAddress
  
foreach ($Assigment in $Assigments) {
  $tests = @{}
  
  #Name of DeliveryGroup
  $DeliveryGroup = $Assigment | %{ $_.Name }
  "DeliveryGroup: $DeliveryGroup" | LogMe -display -progress
  
  if ($ExcludedCatalogs -contains $DeliveryGroup) {
    "Excluded Delivery Group, skipping" | LogMe -display -progress
  } else {
  
    #PublishedName
    $AssigmentDesktopPublishedName = $Assigment | %{ $_.PublishedName }
    "PublishedName: $AssigmentDesktopPublishedName" | LogMe -display -progress
    $tests.PublishedName = "NEUTRAL", $AssigmentDesktopPublishedName
  
    #DesktopsTotal
    $TotalDesktops = $Assigment | %{ $_.TotalDesktops }
    "DesktopsAvailable: $TotalDesktops" | LogMe -display -progress
    $tests.TotalMachines = "NEUTRAL", $TotalDesktops
  
    #DesktopsAvailable
    $AssigmentDesktopsAvailable = $Assigment | %{ $_.DesktopsAvailable }
    "DesktopsAvailable: $AssigmentDesktopsAvailable" | LogMe -display -progress
    $tests.DesktopsAvailable = "NEUTRAL", $AssigmentDesktopsAvailable
  
    #DesktopKind
    $AssigmentDesktopsKind = $Assigment | %{ $_.DesktopKind }
    "DesktopKind: $AssigmentDesktopsKind" | LogMe -display -progress
    $tests.DesktopKind = "NEUTRAL", $AssigmentDesktopsKind
	
	#SessionSupport
	$SessionSupport = $Assigment | %{ $_.SessionSupport }
	"SessionSupport: $SessionSupport" | LogMe -display -progress
    $tests.SessionSupport = "NEUTRAL", $SessionSupport
	
	#ShutdownAfterUse
	$ShutdownDesktopsAfterUse = $Assigment | %{ $_.ShutdownDesktopsAfterUse }
	"ShutdownDesktopsAfterUse: $ShutdownDesktopsAfterUse" | LogMe -display -progress
    
	if ($SessionSupport -eq "MultiSession" -and $ShutdownDesktopsAfterUse -eq "$true" ) { 
	$tests.ShutdownAfterUse = "ERROR", $ShutdownDesktopsAfterUse
	}
	else { 
	 $tests.ShutdownAfterUse = "NEUTRAL", $ShutdownDesktopsAfterUse
	}
	

    #MinimumFunctionalLevel
	$MinimumFunctionalLevel = $Assigment | %{ $_.MinimumFunctionalLevel }
	"MinimumFunctionalLevel: $MinimumFunctionalLevel" | LogMe -display -progress
    $tests.MinimumFunctionalLevel = "NEUTRAL", $MinimumFunctionalLevel
	
	if ($SessionSupport -eq "MultiSession" ) { 
	
	$tests.DesktopsFree = "NEUTRAL", "N/A"
	$tests.DesktopsInUse = "NEUTRAL", "N/A"
		
	}
    else { 
			#DesktopsInUse
			$AssigmentDesktopsInUse = $Assigment | %{ $_.DesktopsInUse }
			"DesktopsInUse: $AssigmentDesktopsInUse" | LogMe -display -progress
			$tests.DesktopsInUse = "NEUTRAL", $AssigmentDesktopsInUse
	
			#DesktopFree
			$AssigmentDesktopsFree = $AssigmentDesktopsAvailable - $AssigmentDesktopsInUse
			"DesktopsFree: $AssigmentDesktopsFree" | LogMe -display -progress
  
			if ($AssigmentDesktopsKind -eq "shared") {
			if ($AssigmentDesktopsFree -gt 0 ) {
				"DesktopsFree < 1 ! ($AssigmentDesktopsFree)" | LogMe -display -progress
				$tests.DesktopsFree = "SUCCESS", $AssigmentDesktopsFree
			} elseif ($AssigmentDesktopsFree -lt 0 ) {
				"DesktopsFree < 1 ! ($AssigmentDesktopsFree)" | LogMe -display -progress
				$tests.DesktopsFree = "SUCCESS", "N/A"
			} else {
				$tests.DesktopsFree = "WARNING", $AssigmentDesktopsFree
				"DesktopsFree > 0 ! ($AssigmentDesktopsFree)" | LogMe -display -progress
			}
			} else {
			$tests.DesktopsFree = "NEUTRAL", "N/A"
			}
	
	
	}
		
  
    #inMaintenanceMode
    $AssigmentDesktopsinMaintenanceMode = $Assigment | %{ $_.inMaintenanceMode }
    "inMaintenanceMode: $AssigmentDesktopsinMaintenanceMode" | LogMe -display -progress
    if ($AssigmentDesktopsinMaintenanceMode) { $tests.MaintenanceMode = "WARNING", "ON" }
    else { $tests.MaintenanceMode = "SUCCESS", "OFF" }
  
    #DesktopsUnregistered
    $AssigmentDesktopsUnregistered = $Assigment | %{ $_.DesktopsUnregistered }
    "DesktopsUnregistered: $AssigmentDesktopsUnregistered" | LogMe -display -progress    
    if ($AssigmentDesktopsUnregistered -gt 0 ) {
      "DesktopsUnregistered > 0 ! ($AssigmentDesktopsUnregistered)" | LogMe -display -progress
      $tests.DesktopsUnregistered = "WARNING", $AssigmentDesktopsUnregistered
    } else {
      $tests.DesktopsUnregistered = "SUCCESS", $AssigmentDesktopsUnregistered
      "DesktopsUnregistered <= 0 ! ($AssigmentDesktopsUnregistered)" | LogMe -display -progress
    }
  
    
      
    #Fill $tests into array
    $AssigmentsResults.$DeliveryGroup = $tests
  }
  " --- " | LogMe -display -progress
}
  
# ======= License Check ========
if($ShowCTXLicense -eq 1 ){

    $myCollection = @()
    try 
	{
        $LicWMIQuery = get-wmiobject -namespace "ROOT\CitrixLicensing" -computer $lsname -query "select * from Citrix_GT_License_Pool" -ErrorAction Stop | ? {$_.PLD -in $CTXLicenseMode}
        
        foreach ($group in $($LicWMIQuery | group pld))
        {
            $lics = $group | select -ExpandProperty group
            $i = 1

            $myArray_Count = 0
		    $myArray_InUse = 0
		    $myArray_Available = 0
		
		    foreach ($lic in @($lics))
		    {
		    $myArray = "" | Select-Object LicenseServer,LicenceName,Count,InUse,Available
		    $myArray.LicenseServer = $lsname
		    $myArray.LicenceName = "$($lics.pld) ($i) Licence"
		    $myArray.Count = $Lic.count - $Lic.Overdraft
		    if ($Lic.inusecount -gt $myArray.Count) {$myArray.InUse = $myArray.Count} else {$myArray.InUse = $Lic.inusecount}
		    $myArray.Available = $myArray.count - $myArray.InUse
		    $myCollection += $myArray
		
		    $myArray = "" | Select-Object LicenseServer,LicenceName,Count,InUse,Available
		    $myArray.LicenseServer = $lsname
		    $myArray.LicenceName = "$($lics.pld) ($i) Overdraft"
		    $myArray.Count = $Lic.Overdraft
		    if ($Lic.inusecount -gt $($Lic.count - $Lic.Overdraft)) {$myArray.InUse = $Lic.inusecount - $($Lic.count - $Lic.Overdraft)} else {$myArray.InUse = 0}
		    $myArray.Available = $myArray.count - $myArray.InUse
		    $myCollection += $myArray
		
		    $myArray_Count += $Lic.count
		    $myArray_InUse += $Lic.inusecount
		    $myArray_Available += $Lic.pooledavailable
				
		    $i++
		    }
		
		    $myArray = "" | Select-Object LicenseServer,LicenceName,Count,InUse,Available
		    $myArray.LicenseServer = $lsname
		    $myArray.LicenceName = "$($lics.pld) - Total"
		    $myArray.Count = $myArray_Count
		    $myArray.InUse = $myArray_InUse
		    $myArray.Available = $myArray_Available
		    $myCollection += $myArray

    }
    }
    catch
    {
            $myArray = "" | Select-Object LicenseServer,LicenceName,Count,InUse,Available
		    $myArray.LicenseServer = $lsname
		    $myArray.LicenceName = "n/a"
		    $myArray.Count = "n/a"
		    $myArray.InUse = "n/a"
		    $myArray.Available = "n/a"
		    $myCollection += $myArray 
    }
    
    $CTXLicResults = @{}

    foreach ($line in $myCollection)
    {
        $tests = @{}


        if ($line.LicenceName -eq "n/a")
        {
            $tests.LicenseServer ="error", $line.LicenseServer
            $tests.Count ="error", $line.Count
		    $tests.InUse ="error", $line.InUse
		    $tests.Available ="error", $line.Available
        }
        else
        {
            $tests.LicenseServer ="NEUTRAL", $line.LicenseServer
            $tests.Count ="NEUTRAL", $line.Count
		    $tests.InUse ="NEUTRAL", $line.InUse
		    $tests.Available ="NEUTRAL", $line.Available}
            $CTXLicResults.($line.LicenceName) =  $tests
        }

}
else {"CTX License Check skipped because ShowCTXLicense = 0 " | LogMe -display -progress }
    
# ======= XenApp Check ========
"Check XenApp Servers ####################################################################################" | LogMe -display -progress
" " | LogMe -display -progress
  
# Check XenApp only if $ShowXenAppTable is 1
if($ShowXenAppTable -eq 1 ) {
$allXenAppResults = @{}
  
$XAmachines = Get-BrokerMachine -MaxRecordCount $maxmachines -AdminAddress $AdminAddress | Where-Object {$_.SessionSupport -eq "MultiSession" -and @(compare $_.tags $ExcludedTags -IncludeEqual | ? {$_.sideindicator -eq '=='}).count -eq 0}

$Maintenance = Get-CitrixMaintenanceInfo -AdminAddress $AdminAddress
  
foreach ($XAmachine in $XAmachines) {
$tests = @{}
  
# Column Name of Machine
$machineDNS = $XAmachine | %{ $_.DNSName }
"Machine: $machineDNS" | LogMe -display -progress
  
# Column CatalogNameName
$CatalogName = $XAmachine | %{ $_.CatalogName }
"Catalog: $CatalogName" | LogMe -display -progress
$tests.CatalogName = "NEUTRAL", $CatalogName
  
# Ping Machine
$result = Ping $machineDNS 100
if ($result -eq "SUCCESS") {
$tests.Ping = "SUCCESS", $result
  
#==============================================================================================
# Column Uptime (Query over WMI - only if Ping successfull)
$tests.WMI = "ERROR","Error"
$job = Start-Job -ScriptBlock $wmiOSBlock -ArgumentList $machineDNS
$wmi = Wait-job $job -Timeout 15 | Receive-Job

# Perform WMI related checks
if ($wmi -ne $null) {
	$tests.WMI = "SUCCESS", "Success"
	$LBTime=[Management.ManagementDateTimeConverter]::ToDateTime($wmi.Lastbootuptime)
	[TimeSpan]$uptime=New-TimeSpan $LBTime $(get-date)

	if ($uptime.days -gt $maxUpTimeDays) {
		"reboot warning, last reboot: {0:D}" -f $LBTime | LogMe -display -warning
		$tests.Uptime = "WARNING", $uptime.days
	} else {
		$tests.Uptime = "SUCCESS", $uptime.days
	}
} else {
	"WMI connection failed - check WMI for corruption" | LogMe -display -error
	stop-job $job
}
#----
  
# Column WriteCacheSize (only if Ping is successful)
################ PVS SECTION ###############
if (test-path \\$machineDNS\c$\Personality.ini) {
# Test if PVS cache is of type "device's hard drive"
$PvsWriteCacheUNC = Join-Path "\\$machineDNS" ($PvsWriteCacheDrive+"$"+"\.vdiskcache")
$CacheDiskOnHD = Test-Path $PvsWriteCacheUNC

if ($CacheDiskOnHD -eq $True) {
  $CacheDiskExists = $True
  $CachePVSType = "Device HD"
} else {
  # Test if PVS cache is of type "device RAM with overflow to hard drive"
  $PvsWriteCacheUNC = Join-Path "\\$machineDNS" ($PvsWriteCacheDrive+"$"+"\vdiskdif.vhdx")
  $CacheDiskRAMwithOverflow = Test-Path $PvsWriteCacheUNC
  if ($CacheDiskRAMwithOverflow -eq $True) {
    $CacheDiskExists = $True
    $CachePVSType = "Device RAM with overflow to disk"
  } else {
    $CacheDiskExists = $False
    $CachePVSType = ""
  }
}

if ($CacheDiskExists -eq $True) {
$CacheDisk = [long] ((get-childitem $PvsWriteCacheUNC -force).length)
$CacheDiskGB = "{0:n2}GB" -f($CacheDisk / 1GB)
"PVS Cache file size: {0:n2}GB" -f($CacheDisk / 1GB) | LogMe
#"PVS Cache max size: {0:n2}GB" -f($PvsWriteMaxSizeInGB / 1GB) | LogMe -display
$tests.WriteCacheType = "NEUTRAL", $CachePVSType
if ($CacheDisk -lt ($PvsWriteMaxSizeInGB * 0.5)) {
"WriteCache file size is low" | LogMe
$tests.WriteCacheSize = "SUCCESS", $CacheDiskGB
}
elseif ($CacheDisk -lt ($PvsWriteMaxSizeInGB * 0.8)) {
"WriteCache file size moderate" | LogMe -display -warning
$tests.WriteCacheSize = "WARNING", $CacheDiskGB
}
else {
"WriteCache file size is high" | LogMe -display -error
$tests.WriteCacheSize = "ERROR", $CacheDiskGB
}
}
$Cachedisk = 0
}
else { $tests.WriteCacheSize = "SUCCESS", "N/A" }
############## END PVS SECTION #############
  
# Check services
$services = Get-Service -Computer $machineDNS
  
if (($services | ? {$_.Name -eq "Spooler"}).Status -Match "Running") {
"SPOOLER service running..." | LogMe
$tests.Spooler = "SUCCESS","Success"
}
else {
"SPOOLER service stopped" | LogMe -display -error
$tests.Spooler = "ERROR","Error"
}
  
if (($services | ? {$_.Name -eq "cpsvc"}).Status -Match "Running") {
"Citrix Print Manager service running..." | LogMe
$tests.CitrixPrint = "SUCCESS","Success"
}
else {
"Citrix Print Manager service stopped" | LogMe -display -error
$tests.CitrixPrint = "ERROR","Error"
}
 
 # Column OSBuild 
$MachineOSVersion = "N/A"
$MachineOSVersion = (Get-ItemProperty -Path "\\$machineDNS\C$\WINDOWS\System32\hal.dll" -ErrorAction SilentlyContinue).VersionInfo.FileVersion.Split()[0]
$tests.OSBuild = "NEUTRAL", $MachineOSVersion

  
}
else { $tests.Ping = "Error", $result }
#END of Ping-Section
  
# Column Serverload
$Serverload = $XAmachine | %{ $_.LoadIndex }
"Serverload: $Serverload" | LogMe -display -progress
if ($Serverload -ge $loadIndexError) { $tests.Serverload = "ERROR", $Serverload }
elseif ($Serverload -ge $loadIndexWarning) { $tests.Serverload = "WARNING", $Serverload }
else { $tests.Serverload = "SUCCESS", $Serverload }
  
# Column MaintMode
$MaintMode = $XAmachine | %{ $_.InMaintenanceMode }
"MaintenanceMode: $MaintMode" | LogMe -display -progress
if ($MaintMode) { 
	$objMaintenance = $Maintenance | Where { $_.TargetName.ToUpper() -eq $XAmachine.MachineName.ToUpper() } | Select -First 1
	If ($null -ne $objMaintenance){$MaintenanceModeOn = ("ON, " + $objMaintenance.User)} Else {$MaintenanceModeOn = "ON"}
	"MaintenanceModeInfo: $MaintenanceModeOn" | LogMe -display -progress
	$tests.MaintMode = "WARNING", $MaintenanceModeOn
	$ErrorVDI = $ErrorVDI + 1
}
else { $tests.MaintMode = "SUCCESS", "OFF" }
  
# Column RegState
$RegState = $XAmachine | %{ $_.RegistrationState }
"State: $RegState" | LogMe -display -progress
  
if ($RegState -ne "Registered") { $tests.RegState = "ERROR", $RegState }
else { $tests.RegState = "SUCCESS", $RegState }

# Column HostedOn 
$HostedOn = $XAmachine | %{ $_.HostingServerName }
"HostedOn: $HostedOn" | LogMe -display -progress
$tests.HostedOn = "NEUTRAL", $HostedOn

# Column Tags 
$Tags = $XAmachine | %{ $_.Tags }
"Tags: $Tags" | LogMe -display -progress
$tests.Tags = "NEUTRAL", $Tags
  
# Column ActiveSessions
$ActiveSessions = $XAmachine | %{ $_.SessionCount }
"Active Sessions: $ActiveSessions" | LogMe -display -progress
$tests.ActiveSessions = "NEUTRAL", $ActiveSessions

# Column ConnectedUsers
$ConnectedUsers = $XAmachine | %{ $_.AssociatedUserNames }
"Connected users: $ConnectedUsers" | LogMe -display -progress
$tests.ConnectedUsers = "NEUTRAL", $ConnectedUsers
  
# Column DeliveryGroup
$DeliveryGroup = $XAmachine | %{ $_.DesktopGroupName }
"DeliveryGroup: $DeliveryGroup" | LogMe -display -progress
$tests.DeliveryGroup = "NEUTRAL", $DeliveryGroup


#==============================================================================================
#               CHECK CPU AND MEMORY USAGE 
#==============================================================================================

        # Check the AvgCPU value for 5 seconds
        $XAAvgCPUval = CheckCpuUsage ($machineDNS)
		#$VDtests.LoadBalancingAlgorithm = "SUCCESS", "LB is set to BEST EFFORT"} 
			
        if( [int] $XAAvgCPUval -lt 75) { "CPU usage is normal [ $XAAvgCPUval % ]" | LogMe -display; $tests.AvgCPU = "SUCCESS", "$XAAvgCPUval %" }
		elseif([int] $XAAvgCPUval -lt 85) { "CPU usage is medium [ $XAAvgCPUval % ]" | LogMe -warning; $tests.AvgCPU = "WARNING", "$XAAvgCPUval %" }   	
		elseif([int] $XAAvgCPUval -lt 95) { "CPU usage is high [ $XAAvgCPUval % ]" | LogMe -error; $tests.AvgCPU = "ERROR", "$XAAvgCPUval %" }
		elseif([int] $XAAvgCPUval -eq 101) { "CPU usage test failed" | LogMe -error; $tests.AvgCPU = "ERROR", "Err" }
        else { "CPU usage is Critical [ $XAAvgCPUval % ]" | LogMe -error; $tests.AvgCPU = "ERROR", "$XAAvgCPUval %" }   
		$XAAvgCPUval = 0

        # Check the Physical Memory usage       
        [int] $XAUsedMemory = CheckMemoryUsage ($machineDNS)
        if( [int] $XAUsedMemory -lt 75) { "Memory usage is normal [ $XAUsedMemory % ]" | LogMe -display; $tests.MemUsg = "SUCCESS", "$XAUsedMemory %" }
		elseif( [int] $XAUsedMemory -lt 85) { "Memory usage is medium [ $XAUsedMemory % ]" | LogMe -warning; $tests.MemUsg = "WARNING", "$XAUsedMemory %" }   	
		elseif( [int] $XAUsedMemory -lt 95) { "Memory usage is high [ $XAUsedMemory % ]" | LogMe -error; $tests.MemUsg = "ERROR", "$XAUsedMemory %" }
		elseif( [int] $XAUsedMemory -eq 101) { "Memory usage test failed" | LogMe -error; $tests.MemUsg = "ERROR", "Err" }
        else { "Memory usage is Critical [ $XAUsedMemory % ]" | LogMe -error; $tests.MemUsg = "ERROR", "$XAUsedMemory %" }   
		$XAUsedMemory = 0  

        foreach ($disk in $diskLettersWorkers)
        {
            # Check Disk Usage 
            $HardDisk = CheckHardDiskUsage -hostname $machineDNS -deviceID "$($disk):"
		    if ($HardDisk -ne $null) {	
			    $XAPercentageDS = $HardDisk.PercentageDS
			    $frSpace = $HardDisk.frSpace

			    If ( [int] $XAPercentageDS -gt 15) { "Disk Free is normal [ $XAPercentageDS % ]" | LogMe -display; $tests."$($disk)Freespace" = "SUCCESS", "$frSpace GB" } 
			    ElseIf ([int] $XAPercentageDS -eq 0) { "Disk Free test failed" | LogMe -error; $tests.CFreespace = "ERROR", "Err" }
			    ElseIf ([int] $XAPercentageDS -lt 5) { "Disk Free is Critical [ $XAPercentageDS % ]" | LogMe -error; $tests."$($disk)Freespace" = "ERROR", "$frSpace GB" } 
			    ElseIf ([int] $XAPercentageDS -lt 15) { "Disk Free is Low [ $XAPercentageDS % ]" | LogMe -warning; $tests."$($disk)Freespace" = "WARNING", "$frSpace GB" }     
			    Else { "Disk Free is Critical [ $XAPercentageDS % ]" | LogMe -error; $tests."$($disk)Freespace" = "ERROR", "$frSpace GB" }
			
			    $XAPercentageDS = 0
			    $frSpace = 0
			    $HardDisk = $null
		    }
		
        }

	




  
" --- " | LogMe -display -progress
  
# Check to see if the server is in an excluded folder path
if ($ExcludedCatalogs -contains $CatalogName) { "$machineDNS in excluded folder - skipping" | LogMe -display -progress }
else { $allXenAppResults.$machineDNS = $tests }
}
  
}
else { "XenApp Check skipped because ShowXenAppTable = 0 or Farm is < V7.x " | LogMe -display -progress }
  
####################### Check END ####################################################################################" | LogMe -display -progress
# ======= Write all results to an html file =================================================
# Add Version of XenDesktop to EnvironmentName
$XDmajor, $XDminor = $controllerversion.Split(".")[0..1]
$XDVersion = "$XDmajor.$XDminor"
$EnvironmentNameOut = "$EnvironmentName $XDVersion"
$emailSubject = ("$EnvironmentNameOut Farm Report - " + $ReportDate)

Write-Host ("Saving results to html report: " + $resultsHTM)
writeHtmlHeader "$EnvironmentNameOut Farm Report" $resultsHTM
  
# Write Table with the Controllers
writeTableHeader $resultsHTM $XDControllerFirstheaderName $XDControllerHeaderNames $XDControllerHeaderWidths $XDControllerTableWidth
$ControllerResults | sort-object -property XDControllerFirstheaderName | %{ writeData $ControllerResults $resultsHTM $XDControllerHeaderNames }
writeTableFooter $resultsHTM

# Write Table with the License
writeTableHeader $resultsHTM $CTXLicFirstheaderName $CTXLicHeaderNames $CTXLicHeaderWidths $CTXLicTableWidth
$CTXLicResults | sort-object -property LicenseName | %{ writeData $CTXLicResults $resultsHTM $CTXLicHeaderNames }
writeTableFooter $resultsHTM

#Write Table with Hypervisor State
writeTableHeader $resultsHTM $HyperVisorHeaderName $HyperVisorHeaderNames $HyperVisorWidths $HyperVisorTablewidth
$HyperVisorResults | %{ writeData $HyperVisorResults $resultsHTM $HyperVisorHeaderNames}
writeTableFooter $resultsHTM
  
# Write Table with the Catalogs
writeTableHeader $resultsHTM $CatalogHeaderName $CatalogHeaderNames $CatalogWidths $CatalogTablewidth
$CatalogResults | %{ writeData $CatalogResults $resultsHTM $CatalogHeaderNames}
writeTableFooter $resultsHTM

#Write Table with SessionState
writeTableHeader $resultsHTM $SessionHeaderName $SessionHeaderNames $SessionWidths $SessionTablewidth
$SessionResults | %{ writeData $SessionResults $resultsHTM $SessionHeaderNames}
writeTableFooter $resultsHTM
  
  
# Write Table with the Assignments (Delivery Groups)
writeTableHeader $resultsHTM $AssigmentFirstheaderName $vAssigmentHeaderNames $vAssigmentHeaderWidths $Assigmenttablewidth
$AssigmentsResults | sort-object -property ReplState | %{ writeData $AssigmentsResults $resultsHTM $vAssigmentHeaderNames }
writeTableFooter $resultsHTM

# Write Table with all XenApp Servers
if ($ShowXenAppTable -eq 1 ) {
writeTableHeader $resultsHTM $XenAppFirstheaderName $XenAppHeaderNames $XenAppHeaderWidths $XenApptablewidth
$allXenAppResults | sort-object -property CatalogName | %{ writeData $allXenAppResults $resultsHTM $XenAppHeaderNames }
writeTableFooter $resultsHTM
}
else { "No XenApp output in HTML " | LogMe -display -progress }

# Write Table with all Desktops
if ($ShowDesktopTable -eq 1 ) {
#writeTableHeader $resultsHTM $VDIFirstheaderName $VDIHeaderNames $VDIHeaderWidths $VDItablewidth
#$allResults | sort-object -property CatalogName | %{ writeData $allResults $resultsHTM $VDIHeaderNames }
#writeTableFooter $resultsHTM
}
#else { "No XenDesktop output in HTML " | LogMe -display -progress }

# If you added username an password, add this to smtpClient
--------------------------------------------------------------------




<?xml version="1.0" encoding="utf-8"?>
<settings>
	<Variables>
		<Variable>
			<!-- Define a EnvironmentName e.g. Integration/Production etc. - this will be used in HTML & Email Subject -->
			<Name>EnvironmentName</Name>
			<Value>XenApp and XenDesktop</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Define the hostnames of delivery controllers, you can use localhost if you run localy
			     Example: CXDC01.domain.tld,CXDC02.domain.tld -->
			<Name>DeliveryControllers</Name>
			<Value>localhost</Value> <!-- Add Server separated by comma -->
			<Type>[array]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Information about the disk you want to check. -->
			<Name>diskLettersControllers</Name>
			<Value>C,D</Value>
			<Type>[array]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Raise alert if delivery controllers have been rebooted in less than this number of days -->
			<Name>minUpTimeDaysDDC</Name>
			<Value>1</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Maximum uptime of a virtual Desktop or a XenApp
				 Example: 7 -->
			<Name>maxUpTimeDays</Name>
			<Value>7</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Exclude Catalogs, e.g Testing or Poc-Catalogs
				 Example: Windows 7,Windows 8 Test -->
			<Name>ExcludedCatalogs</Name>
			<Value></Value>
			<Type>[array]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Exclude Tags, e.g excludeFromReport, UAT, etc -->
			<Name>ExcludedTags</Name>
			<Value>excludeFromReport</Value>
			<Type>[array]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- define the maximum of counted machines (default is only 250) -->
			<Name>maxmachines</Name>
			<Value>1000</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
<!-- XenDesktop Options -->
		<Variable>
			<!-- # Set to 1 if you want to Check a Environment with XenDesktop (V 5.x and higher) -->
			<Name>ShowDesktopTable</Name>
			<Value>1</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Define if you ONLY want to see bad XENAPP (Unregistered, to high Uptime, Ping-Time-out)
				 I propose to set this value to 1 in not small environments >50 Desktops -->
			<Name>ShowOnlyErrorXA</Name>
			<Value>0</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Define if you ONLY want to see bad DESKTOPS (Unregistered, to high Uptime, Ping-Time-out)
				 I propose to set this value to 1 in not small environments >50 Desktops -->
			<Name>ShowOnlyErrorVDI</Name>
			<Value>0</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Define if you want to see the used graphic mode)
				  -->
			<Name>ShowGraphicsMode</Name>
			<Value>1</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
<!-- XenApp Options -->
		<Variable>
			<!-- Set to 1 if you want to Check a Environment with XenApp (V 7.x and higher) - if you need a Script for versions below visit http://deptive.co.nz/xenapp-farm-health-check-v2/ -->
			<Name>ShowXenAppTable</Name>
			<Value>1</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Information about the disk you want to check. -->
			<Name>diskLettersWorkers</Name>
			<Value>C,D</Value>
			<Type>[array]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Set to 1 if you want to see connected XenApp Users -->
			<Name>ShowConnectedXenAppUsers</Name>
			<Value>1</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Set value for a load of a XenApp server that is be fine, but is needed to escalate -->
			<Name>loadIndexWarning</Name>
			<Value>6000</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Set value for a load of a XenApp server that is be critical -->
			<Name>loadIndexError</Name>
			<Value>8500</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- # Set to 1 if you want to Check a Citrix license usage -->
			<Name>ShowCTXLicense</Name>
			<Value>1</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- # Select types of licenses to report, eg: XDT_PLT_UD, PVSD_STD_CCS -->
			<Name>CTXLicenseMode</Name>
			<Value>XDT_PLT_UD,PVSD_STD_CCS</Value>
			<Type>[array]</Type>
			<Scope>Script</Scope>
		</Variable>
<!-- PVS-Section: If you are using WriteCache to HD -->
		<Variable>
			<!-- Drive to PVS vDisk write cache file -->
			<Name>PvsWriteCacheDrive</Name>
			<Value>D</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Size of the local PVS write cache drive -->
			<Name>PvsWriteMaxSize</Name>
			<Value>15</Value> <!-- size in GB -->
			<Type>[long]</Type>
			<Scope>Script</Scope>
		</Variable>
<!-- E-Mail Configuration -->
		<Variable>
			<!-- Address of the sender -->
			<Name>emailFrom</Name>
			<Value>citrix@mycompany.ch</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Address of the recipient -->
			<Name>emailTo</Name>
			<Value>citrix@mycompany.ch</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- IP or name of SMTP server  -->
			<Name>smtpServer</Name>
			<Value>mailrelay.mycompany.ch</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Port of SMTP server -->
			<Name>smtpServerPort</Name>
			<Value>25</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Use ssl for SMTP or not -->
			<Name>smtpEnableSSL</Name>
			<Value>False</Value> <!-- False or True -->
			<Type>[bool]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Priority of email -->
			<Name>emailPrio</Name>
			<Value>Low</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Username -->
			<Name>smtpUser</Name>
			<Value></Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Key for password encryption -->
			<Name>smtpKey</Name>
			<Value>7,13,25,32,42,64,72,88,91,55,88,55,77,59,22,82,200,0,3,88,10,55,93,244</Value>
			<Type>[array]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Password
				 Create password with follow two lines
				 $Credential = Get-Credential
				 $credential.Password | ConvertFrom-SecureString -Key $smtpKey -->
			<Name>smtpPW</Name>
			<Value></Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
	</Variables>
</settings>

--------------------------------------------------------------------------